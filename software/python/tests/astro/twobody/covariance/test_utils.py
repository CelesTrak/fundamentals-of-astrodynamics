import numpy as np
import pytest

import src.valladopy.astro.twobody.covariance.utils as utils

from ....conftest import custom_allclose


@pytest.fixture
def reci():
    return [-30762454.8061775, -28804817.6521682, -991451.166480117]  # m


@pytest.fixture
def veci():
    return [2102.69117282211, -2239.85220168736, -140.227078892292]  # m/s


@pytest.fixture
def cov():
    # fmt: off
    return np.array([
        [12559.93762571587, 12101.56371305036, -440.3145384949657,
         -0.8507401236198346, 0.9383675791981778, -0.0318596430999798],
        [12101.56371305036, 12017.77368889201, 270.3798093532698,
         -0.8239662300032132, 0.9321640899868708, -0.001327326827629336],
        [-440.3145384949657, 270.3798093532698, 4818.009967057008,
         0.02033418761460195, 0.03077663516695039, 0.1977541628188323],
        [-0.8507401236198346, -0.8239662300032132, 0.02033418761460195,
         5.774758755889862e-5, -6.396031584925255e-5, 1.079960679599204e-6],
        [0.9383675791981778, 0.9321640899868708, 0.03077663516695039,
         -6.396031584925255e-5, 7.24599391355188e-5, 1.03146660433274e-6],
        [-0.0318596430999798, -0.001327326827629336, 0.1977541628188323,
         1.079960679599204e-6, 1.03146660433274e-6, 1.870413627417302e-5],
    ])  # m and m/s


@pytest.fixture
def sigmapts_pos():
    # fmt: off
    return np.array([
        [-30762260.693290558, -30762648.919064444, -30762454.8061775,
         -30762454.8061775, -30762454.8061775, -30762454.8061775],
        [-28804630.62341544, -28805004.68092096, -28804784.886840362,
         -28804850.417496037, -28804817.6521682, -28804817.6521682],
        [-991457.9715080381, -991444.3614521959, -991387.5664660144,
         -991514.7664942197, -991349.3688391703, -991552.9641210637]
    ])


@pytest.fixture
def sigmapts_posvel():
    # fmt: off
    return np.array([
        [-30762180.289100155, -30762729.323254846, -30762454.8061775, -30762454.8061775,
         -30762454.8061775, -30762454.8061775, -30762454.8061775, -30762454.8061775,
         -30762454.8061775, -30762454.8061775, -30762454.8061775, -30762454.8061775],
        [-28804553.153569493, -28805082.150766905, -28804771.314997192,
         -28804863.989339206, -28804817.6521682, -28804817.6521682,
         -28804817.6521682, -28804817.6521682, -28804817.6521682,
         -28804817.6521682, -28804817.6521682, -28804817.6521682],
        [-991460.7902428954, -991441.5427173387, -991361.2224776058, -991541.1104826282,
         -991307.2028756727, -991595.1300845613, -991451.166480117, -991451.166480117,
         -991451.166480117, -991451.166480117, -991451.166480117, -991451.166480117],
        [2102.672578566368, 2102.7097670778517, 2102.6906194263856, 2102.691726217834,
         2102.691123039012, 2102.6912226052077, 2102.691828911714, 2102.690516732506,
         2102.69117282211, 2102.69117282211, 2102.69117282211, 2102.69117282211],
        [-2239.8316921965493, -2239.8727111781704, -2239.8485706292545,
         -2239.8558327454652, -2239.85181654567, -2239.85258682905,
         -2239.8527726341404, -2239.8516307405794, -2239.8515223316444,
         -2239.8528810430753, -2239.85220168736, -2239.85220168736],
        [-140.22777523461232, -140.2263825499717, -140.22327594957565,
         -140.23088183500838, -140.22125956276346, -140.23289822182056,
         -140.23328835909945, -140.22086942548458, -140.22579064438324,
         -140.2283671402008, -140.22226268062258, -140.23189510396145]
    ])  # m and m/s


def test_poscov2pts(reci, cov, sigmapts_pos):
    # Calculate sigma points
    sigmapts = utils.poscov2pts(reci, cov)

    # Compare results
    assert custom_allclose(sigmapts, sigmapts_pos)


def test_posvelcov2pts(reci, veci, cov, sigmapts_posvel):
    # Calculate sigma points
    sigmapts = utils.posvelcov2pts(reci, veci, cov)

    # Compare results
    assert custom_allclose(sigmapts, sigmapts_posvel)


def test_remakecov(reci, veci, cov, sigmapts_pos, sigmapts_posvel):
    # Find mean and covariance from sigma points (position only)
    yu, cov_out = utils.remakecov(sigmapts_pos)

    # Compare results
    assert custom_allclose(yu, np.array([reci]).T)
    assert custom_allclose(cov_out, cov[:3, :3], rtol=1e-9)

    # Find mean and covariance from sigma points (position and velocity)
    yu, cov_out = utils.remakecov(sigmapts_posvel)

    # Compare results
    assert custom_allclose(yu, np.array([[*reci, *veci]]).T)
    assert custom_allclose(cov_out, cov, rtol=1e-9)
