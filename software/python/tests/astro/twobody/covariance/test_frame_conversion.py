import numpy as np
import pytest

import src.valladopy.astro.twobody.covariance.frame_conversions as fc
from src.valladopy.astro.time.data import iau80in

from ....conftest import custom_allclose


def cartcov():
    # Cartesian covariance matrix in m and m/s
    return np.array(
        [
            [24097166, 86695628, -5509927, -6294.97, 1752.326, 17.65861],
            [86695628, 453000000, -28000000, -32967.4, 6319.431, 90.73355],
            [-5509927, -28000000, 1771703, 2061.582, -401.582, -5.67764],
            [-6294.97, -32967.4, 2061.582, 6949865, -1352586, 0.385006],
            [1752.326, 6319.431, -401.582, -1352586, 263241.3, 2.013476],
            [17.65861, 90.73355, -5.67764, 0.385006, 2.013476, 33.37338],
        ]
    )


@pytest.fixture(name="cartcov")
def cartcov_fix():
    return cartcov()


@pytest.fixture
def cartstate():
    # Cartesian state in km and km/s
    return np.array(
        [
            11074.95274,
            40629.74421,
            -32.1123199,
            -2.940822436,
            0.9007122363,
            0.002036330819,
        ]
    )


# fmt: off
def class_cov_base():
    # Classical covariance matrix in m and radians
    return [
        [5331023186024109, -9040508.167764489, -31592.14808101208,
         34232891.77449311, 4042240100.791793],
        [-9040508.167764485, 0.015331208062918465, 5.372146060128627e-05,
         -0.058207412772983746, -6.854798802080871],
        [-31592.148081012085, 5.3721460601286275e-05, 1.7678810701926767e-06,
         -0.0019143196050926616, -0.02224371317903348],
        [34232891.77449311, -0.05820741277298375, -0.0019143196050926614,
         2.0749611965515924, 24.101664311430255],
        [4042240100.791794, -6.854798802080872, -0.02224371317903348,
         24.101664311430255, 3066.878198247249],
    ]


def make_cov(cov_base, last_row):
    return np.column_stack([np.vstack([cov_base, last_row[:-1]]), last_row])


def class_cov_true():
    last_row = [
        -4076472971.3328567, 6.913006182584299, 0.024158032674088642,
        -26.176623722291907, -3090.979848722306, 3117.1564568280405,
    ]
    return make_cov(class_cov_base(), last_row)


def class_cov_mean():
    last_row = [
        -4083183084.476787, 6.924385395457872, 0.024197798266311993,
        -26.219712037129213, -3096.0677824371114, 3127.4269467985023,
    ]
    return make_cov(class_cov_base(), last_row)


def class_state_base():
    # Classical state in km and radians
    return [
        42087.7080574158,
        0.0310900603602949,
        0.00102577939911935,
        2.14278761707691,
        3.82453248238077,
    ]


def class_state_true():
    return [*class_state_base(), 1.62054408207275]


def class_state_mean():
    return [*class_state_base(), 1.55837880318832]


def eq_state_true_n():
    # Equinoctial state in radians
    return [
        7.3119964730756e-05,
        0.0295519718827463,
        -0.00965778499699359,
        0.000431250387454424,
        -0.000277631038191127,
        1.30467887435085
    ]


def eq_state_mean_a():
    # Equinoctial state in km and radians
    return [42087.7080574158, *eq_state_true_n()[1:5], 1.24251359546641]

# fmt: on


class TestClassicalCartesian:
    # fmt: off
    @pytest.fixture
    def class_tm_base(self):
        return [
            [0.5253644964759826, 1.9273603788610492, -0.001523317811913225,
             -26137.953191986773, 8005.506889386072, 18.098855265405795],
            [-2.301155985975573e-08, 5.8138513632311184e-09, 1.6619281402670584e-11,
             0.00010674050364398441, 0.00030712477953877607, -2.6259857897553283e-07],
            [-1.5651228313484214e-11, -1.0075971851611348e-11, -1.814633059178445e-08,
             1.876600229186106e-07, 1.208120584130285e-07, 0.00021757658550672633],
            [-1.2893279250251951e-08, -8.30045516031882e-09, -1.494871220283562e-05,
             -0.00020332310643289575, -0.0001308956624025655, -0.23573666119055636],
            [1.9975551200319462e-07, 7.480373001058164e-07, 1.4948132421348424e-05,
             -0.01980854835831763, 0.006124227038806058, 0.2357504695553114],
        ]
    # fmt: on

    @pytest.mark.parametrize(
        "use_mean_anom, tm_lastrow, cov_expected",
        [
            (
                # fmt: off
                True,
                [-2.1012648980705486e-07, -7.34696403701101e-07, 5.891834658944977e-10,
                 0.020044836175870634, -0.006003072956312084, -1.3955411651010935e-05],
                class_cov_mean(),
            ),
            (
                # fmt: off
                False,
                [-2.0977247629131585e-07, -7.334919093688606e-07, 5.882093186826968e-10,
                 0.02001187135777983, -0.005993331445269153, -1.3932388555455746e-05],
                class_cov_true(),
            ),
        ],
    )
    def test_covct2cl(
        self, cartcov, cartstate, class_tm_base, use_mean_anom, tm_lastrow, cov_expected
    ):
        # Update matrices
        # For covariance, last row == last column
        tm_expected = np.vstack([class_tm_base, tm_lastrow])

        # Test covariance conversion
        classcov, tm = fc.covct2cl(cartcov, cartstate, use_mean_anom=use_mean_anom)

        # Compare results
        assert custom_allclose(classcov, cov_expected)
        assert custom_allclose(tm, tm_expected)

    @pytest.mark.parametrize(
        "use_mean_anom, class_state, class_cov, tm_exp, cartcov_exp",
        # fmt: off
        [
            (
                True,
                class_state_mean(),
                class_cov_mean(),
                [
                    [0.26313983942512426, -122181.09461831323, -27000.833116307094,
                     -40629744.21000002, -40629740.66496733, -40219144.61841942],
                    [0.9653589155905844, -510035.2045932821, -17382.637901740887,
                     11074952.739999903, 11074974.61023185, 12318280.508156924],
                    [-0.000762985712046392, 388.5845977374862, -31305277.396918915,
                     0, 28893.677010573563, 27849.176713029363],
                    [3.493683276822948e-05, 865.2314914318102, 1.71219733686734,
                     -900.7122362999926, -900.7106317278178, -808.3919389536693],
                    [-1.0700419170738e-05, 2955.794755743881, 1.1022810368438238,
                     -2940.822436000001, -2940.8226451355285, -2965.6792649314566],
                    [-2.4191514732274634e-08, -2.387504193316633, 1985.1540268409651,
                     0, 2.409791539953639, 2.3439685169019615]
                ],
                [
                    [24098442.580799103, 86695218.21947145, -5509927.873355819,
                     -6294.930929586146, 1752.417985989945, 17.658533888831073],
                    [86695551.13614655, 453000033.8695812, -27999999.954731148,
                     -32967.40471932187, 6319.425707785413, 90.7335547196626],
                    [-5509927.0577840805, -27999999.943911552, 1771703.0000502856,
                     2061.5921072992423, -401.5839722053788, -5.677635830610768],
                    [-6294.951171875, -32967.40576171875, 2061.5921034812927,
                     6949865.000000715, -1352585.999998629, 0.38500535738421604],
                    [1752.479736328125, 6319.385314941406, -401.58407604694366,
                     -1352585.9999958351, 263241.3000110984, 2.013476115767844],
                    [17.658579101844225, 90.73356022074586, -5.677635813602592,
                     0.3850053571416687, 2.01347612272229, 33.37338000069615]
                ],
            ),
            (
                False,
                class_state_true(),
                class_cov_true(),
                [
                    [0.26313983942513086, -137728.61043798938, -27000.833116307254,
                     -40629744.20999994, -40629740.66496724, -40285313.20469349],
                    [0.9653589155905823, -505273.3265653776, -17382.637901740993,
                     11074952.740000183, 11074974.61023213, 12338546.558424711],
                    [-0.0007629857120463965, 399.3502547305805, -31305277.3969191,
                     0, 28893.67701057334, 27894.994212866175],
                    [3.4936832768229415e-05, 864.918991338172, 1.7121973368673264,
                     -900.712236300013, -900.7106317278384, -809.7219063675537],
                    [-1.0700419170738243e-05, 2954.648313030472, 1.1022810368438152,
                     -2940.8224359999954, -2940.822645135523, -2970.558404111681],
                    [-2.4191514732274445e-08, -2.386598085343853, 1985.1540268409494,
                     0, 2.409791539953653, 2.347824816793632]
                ],
                [
                    [24096124.615553856, 86695907.30600595, -5509926.253087776,
                     -6294.978854407527, 1752.2477284182096, 17.658669530529835],
                    [86696324.15161896, 452999803.3278446, -28000000.491524436,
                     -32967.38936690602, 6319.482606475707, 90.73350950974327],
                    [-5509925.572429657, -28000000.403985977, 1771702.9990295544,
                     2061.592136245985, -401.58386245468864, -5.67763592028615],
                    [-6294.9677734375, -32967.4013671875, 2061.5921149253845,
                     6949865.000000477, -1352585.9999996424, 0.3850053581991233],
                    [1752.24560546875, 6319.4521484375, -401.58391058444977,
                     -1352586.000000529, 263241.29999387264, 2.013476129475748],
                    [17.658705342852045, 90.73352183160023, -5.677635904114169,
                     0.3850053595509486, 2.0134761320387486, 33.37338000068877]
                ],
            ),
        ],
        # fmt: on
    )
    def test_covcl2ct(self, use_mean_anom, class_state, class_cov, tm_exp, cartcov_exp):
        # Test covariance conversion
        cartcov_out, tm = fc.covcl2ct(
            class_cov, class_state, use_mean_anom=use_mean_anom
        )

        # Compare results
        # NOTE: The covariance seems very sensitive to machine precision, so we use a
        #       higher absolute tolerance for this test
        assert custom_allclose(cartcov_out, np.array(cartcov_exp), atol=1e-3)
        assert custom_allclose(tm, np.array(tm_exp))


class TestEquinoctialCartesian:
    # fmt: off
    eq_cov_true_n = [
        [3.620382720282475e-08, -8.020295923888982e-05, -0.0003212558295547466,
         5.9379580707639784e-08, 1.618945695186506e-08, 0],
        [-8.020295923888982e-05, 0.17767502556217937, 0.7116835703536055,
         -0.000131446597240794, -3.583704509952729e-05, 0],
        [-0.0003212558295547466, 0.7116835703536054, 2.8506742490366133,
         -0.000526942941471943, -0.0001436592539704766, 0],
        [5.937958070763978e-08, -0.00013144659724079397, -0.0005269429414719431,
         9.192800461932832e-07, 2.504978222924519e-07, 0],
        [1.6189456951865057e-08, -3.58370450995273e-05, -0.00014365925397047657,
         2.504978222924519e-07, 6.852121825668235e-08, 0],
        [0, 0, 0, 0, 0, 0]
    ]

    eq_cov_mean_a = [
        [5331023186024117, 30776443.85466882, 123276149.59726484,
         -22785.846670808547, -6212.4130785819325, 11385265.073260155],
        [30776443.854668826, 0.17767502556217937, 0.7116835703536055,
         -0.000131446597240794, -3.583704509952729e-05,
         0.06572803376592073],
        [123276149.59726484, 0.7116835703536054, 2.8506742490366133,
         -0.000526942941471943, -0.0001436592539704766,
         0.26327631579518807],
        [-22785.84667080855, -0.00013144659724079397, -0.0005269429414719431,
         9.192800461932832e-07, 2.504978222924519e-07, -4.8872111603682685e-05],
        [-6212.4130785819325, -3.58370450995273e-05, -0.00014365925397047657,
         2.504978222924519e-07, 6.852121825668235e-08, -1.3322454764827869e-05],
        [11385265.073260156, 0.06572803376592073, 0.2632763157951882,
         -4.887211160368268e-05, -1.3322454764827875e-05, 0.024315241765525693]
    ]

    # fmt: on

    @pytest.fixture(name="eq_cov_true_n")
    def eq_cov_true_n_fix(self):
        return self.eq_cov_true_n

    @pytest.fixture(name="eq_cov_mean_a")
    def eq_cov_mean_a_fix(self):
        return self.eq_cov_mean_a

    @pytest.mark.parametrize(
        # fmt: off
        "fr, use_mean_anom, tm_exp, cov_exp",
        [
            (
                1,
                False,
                [
                    [-1.3690921373305804e-12, -5.022672750444952e-12,
                     3.969743773961633e-15, 6.811512091339006e-08,
                     -2.086223300417736e-08, -4.7165350161198116e-11],
                    [-2.0068455953788673e-08, 1.2670447722294537e-08,
                     1.0197686823076022e-11, -9.18105180187478e-05,
                     0.0003498129983032651, -1.1624907558308972e-07],
                    [1.267043519667704e-08, 2.0054673518069036e-08,
                     -2.229628302516436e-11, -0.0006245480252550316,
                     8.170982852901403e-05, 4.896377646967924e-07],
                    [-3.000397236679245e-12, -1.9316003510677005e-12,
                     -3.478717393360175e-09, 1.3534342113673268e-07,
                     8.713159597219173e-08, 0.00015691972630474597],
                    [9.796296006771089e-12, 6.306674521132766e-12,
                     1.1358011163540663e-08, 3.68922711006994e-08,
                     2.375056307166365e-08, 4.2773597972181366e-05],
                    [0, 0, 0, 0, 0, 0]
                ],
                eq_cov_true_n
            ),
            (
                -1,
                False,
                [
                    [-1.3690921373305804e-12, -5.022672750444952e-12,
                     3.969743773961633e-15, 6.811512091339006e-08,
                     -2.086223300417736e-08, -4.7165350161198116e-11],
                    [-4.022750315581222e-09, -2.4013723311637738e-08,
                     -9.237815663664927e-07, 0.0005939615477391202,
                     -0.00022728161483621782, -0.014568406425328312],
                    [-2.3602079898300232e-08, 3.1745451584017257e-09,
                     -1.0289811896648058e-07, 0.00017357175613918577,
                     0.0002837042684058097, -0.0016232726121407765],
                    [3.86212460269652e-05, 2.4863645210833514e-05,
                     0.04477820425402866, -0.08532715571983353,
                     -0.05493204763995006, -98.9299207117852],
                    [5.033787069961052e-06, 3.240659187614189e-06,
                     0.005836268084997266, 0.5264054942093714,
                     0.33889013927507794, 610.324501796048],
                    [0, 0, 0, 0, 0, 0]
                ],
                [
                    [3.620382720282475e-08, 0.00032012458433335, 5.9368992368515214e-05,
                     -0.03742331082188849, 0.23095697339285887, 0],
                    [0.000320124584333352, 2.8377210133468544, 0.5257376925883985,
                     -282.8952997336925, 1745.3821081654376, 0],
                    [5.9368992368515214e-05, 0.5257376925883985, 0.09744237174847635,
                     -56.09176792478839, 346.0759741025573, 0],
                    [-0.03742331082188848, -282.8952997336926, -56.09176792478837,
                     368880.277636458, -2253735.9673102433, 0],
                    [0.23095697339285887, 1745.3821081654376, 346.0759741025573,
                     -2253735.9673102433, 13906034.2698353, 0],
                    [0, 0, 0, 0, 0, 0]
                ],
            ),
            (
                1,
                True,
                [
                    [0.5253644964759829, 1.9273603788610505, -0.001523317811913226,
                     -26137.9531919868, 8005.50688938608, 18.098855265405813],
                    [-2.0068455953788673e-08, 1.2670447722294537e-08,
                     1.0197686823076022e-11, -9.18105180187478e-05,
                     0.0003498129983032651, -1.1624907558308972e-07],
                    [1.267043519667704e-08, 2.0054673518069036e-08,
                     -2.229628302516436e-11, -0.0006245480252550316,
                     8.170982852901403e-05, 4.896377646967924e-07],
                    [-3.000397236679245e-12, -1.9316003510677005e-12,
                     -3.478717393360175e-09, 1.3534342113673268e-07,
                     8.713159597219173e-08, 0.00015691972630474597],
                    [9.796296006771089e-12, 6.306674521132766e-12,
                     1.1358011163540663e-08, 3.68922711006994e-08,
                     2.375056307166365e-08, 4.2773597972181366e-05],
                    [2.2795365114085697e-08, -6.596483795216146e-09,
                     -2.386294678782899e-11, -0.00018068561497021647,
                     -0.0006244783204972765, 3.785668116986375e-07]
                ],
                eq_cov_mean_a
            )
        ],
        # fmt: on
    )
    def test_covct2eq(self, cartcov, cartstate, fr, use_mean_anom, tm_exp, cov_exp):
        # Test covariance conversion
        eqcov, tm = fc.covct2eq(cartcov, cartstate, fr, use_mean_anom=use_mean_anom)

        # Compare results
        assert custom_allclose(eqcov, np.array(cov_exp))
        assert custom_allclose(tm, np.array(tm_exp))

    @pytest.mark.parametrize(
        "eq_cov, eq_state, fr, anom_type, tm_exp, cartcov_exp",
        # fmt: off
        [
            (
                eq_cov_true_n,
                eq_state_true_n(),
                1,
                fc.AnomalyType.TRUE_N,
                [
                    [-100975183096.07455, -80738127.5861465, 12491735.989856685,
                     -41664.472708166824, 35043.176647159205, -40219144.61841943],
                    [-370439130266.795, 10528913.929764934, -45512762.743790254,
                     -6149.499636585576, 54672.47009893215, 12318280.50815694],
                    [292782051.330147, 63790.40777749196, 14497.382985423721,
                     -22149899.653338224, 81259467.04421845, 27849.17671302949],
                    [-13406381.539473144, -1638.0005455650103, -2588.6338814766927,
                     4.572791781725631, 0.776864797419764, -808.3919389536695],
                    [4106093.50271898, -2584.471169505768, 1685.738159186185,
                     1.6329267425338796, -1.536199604048928, -2965.679264931454],
                    [9283.058904343163, 2.8478363169208993, 1.2966725993197916,
                     5881.643324799075, 1801.423998724791, 2.3439685169019664]
                ],
                # way off
                [
                    [39331864659479.08, -12046390749660.303, -27242805182.93676,
                     -15742731805.713587, 6117959345.329725, -2345106.8240762316],
                    [-12046390749660.432, 3690024013296.2417, 8314184306.206524,
                     4821634508.000556, -1873792801.675126, 718350.8231142941],
                    [-27242805182.936436, 8314184306.206689, 20633526.80239944,
                     10902838.1146342, -4236880.409579698, 1618.3174190735904],
                    [-15742731805.713634, 4821634508.000564, 10902838.114634234,
                     6301127.557017929, -2448748.217282844, 916.80715442001],
                    [6117959345.32972, -1873792801.6750946, -4236880.409579711,
                     -2448748.21728284, 951634.4832705457, -358.43897965066753],
                    [-2345106.824076248, 718350.8231143533, 1618.317419073559,
                     916.8071544200117, -358.43897965066833, 33.51313480775715]
                ],
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a(),
                1,
                fc.AnomalyType.MEAN_A,
                [
                    [0.26313983942512764, -80738127.58614658, 12491735.989856822,
                     -41664.472708167086, 35043.17664715923, -40219144.618419394],
                    [0.9653589155905834, 10528913.929765068, -45512762.7437904,
                     -6149.499636585656, 54672.47009893231, 12318280.50815707],
                    [-0.0007629857120463964, 63790.40777749196, 14497.382985423681,
                     -22149899.65333851, 81259467.04421851, 27849.17671302939],
                    [3.493683276822947e-05, -1638.0005455650294, -2588.633881476687,
                     4.572791781725627, 0.7768647974197728, -808.3919389536802],
                    [-1.070041917073813e-05, -2584.471169505762, 1685.738159186204,
                     1.63292674253388, -1.5361996040489176, -2965.6792649314557],
                    [-2.4191514732274663e-08, 2.8478363169209127, 1.296672599319776,
                     5881.643324799077, 1801.4239987248116, 2.3439685169019766]
                ],
                # very close!
                [
                    [24097165.763661303, 86695627.63389367, -5509926.999693126,
                     -6294.970359922021, 1752.326066693291, 17.6586100007663],
                    [86695628.11006014, 452999998.89138854, -27999999.999551132,
                     -32967.39998020321, 6319.431011194798, 90.73355004143806],
                    [-5509926.999621473, -27999999.99992964, 1771703.0000003474,
                     2061.582000195832, -401.5820000227902, -5.677640000546228],
                    [-6294.97038269043, -32967.399908065796, 2061.582000212744,
                     6949864.999999981, -1352586.000000017, 0.3850059039760936],
                    [1752.326072216034, 6319.430997729301, -401.58200005302206,
                     -1352586.0000000142, 263241.3000000067, 2.0134760186865037],
                    [17.658609996549785, 90.73355006280872, -5.677640000552529,
                     0.3850059039780215, 2.0134760186873537, 33.37337999999994]
                ],
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a(),
                -1,
                fc.AnomalyType.MEAN_A,
                [
                    [0.2631403017489789, -80738122.54371239, 12491714.193162685,
                     41664.46976308289, -35043.181221823186, -40219138.71902801],
                    [-0.9653590416120534, -10528875.263144758, 45512756.761328086,
                     18448.512392800727, -35568.1435402667, -12318261.246646103],
                    [-0.0003090686330339933, -75482.99825546826, 36045.630474733574,
                     -22149892.82416389, 81259477.6521254, -41528.912552987626],
                    [3.493682764365379e-05, -1638.0017833044335, -2588.6330741535157,
                     -4.572790999694168, -0.7768635826731373, -808.3933592588508],
                    [1.0700402439000201e-05, 2584.4719539674898, -1685.7369194533303,
                     -4.898780699371247, -3.536723054137829, 2965.679652082032],
                    [3.607457808154583e-08, 0.022281461970810712, -3.1687246480936437,
                     5881.641511394426, 1801.42118192355, 0.9494897924766874]
                ],
                [
                    [24113125.926554903, -86726448.9779124, -5470297.10716315,
                     46547.81175214237, 8510.986893622237, 434.31551872919994],
                    [-86726449.39747593, 453009644.3071763, 27850721.65679375,
                     47372.89757519903, 9115.90396904544, 82.66731459795386],
                    [-5470297.107339502, 27850721.657326225, 1752762.4079194253,
                     2104.32940727222, 408.8860374718378, -1.676255785011316],
                    [46547.81177330017, 47372.89755630493, 2104.329407263547,
                     6949847.957188423, 1352577.1912274987, 11988.83992020904],
                    [8510.986921787262, 9115.90397465229, 408.8860374968499,
                     1352577.1912274964, 263238.5186350368, 2331.1611986892954],
                    [434.31551875174046, 82.66731452010572, -1.676255785030662,
                     11988.839920209044, 2331.1611986893, 54.054795809049374]
                ],
            )
        ]
        # fmt: on
    )
    def test_coveq2ct(self, eq_cov, eq_state, fr, anom_type, tm_exp, cartcov_exp):
        # Test covariance conversion
        cartcov_out, tm = fc.coveq2ct(eq_cov, eq_state, fr, anom_type)

        # Compare results
        assert custom_allclose(cartcov_out, np.array(cartcov_exp), atol=1e-6)
        assert custom_allclose(tm, np.array(tm_exp))


class TestEquinoctialClassical:
    # fmt: off
    eq_cov_true_n = np.array(
        [
            [3.620382720282463e-08, -8.02029592388877e-05, -0.00032125582955474765,
             5.93795806989224e-08, 1.6189456958473605e-08, -5.533400300461455e-11],
            [-8.020295923888773e-05, 0.1776750255621706, 0.7116835703535914,
             -0.00013144659722147834, -3.5837045114165295e-05, 1.2020141326729572e-07],
            [-0.00032125582955474776, 0.7116835703535914, 2.8506742490366412,
             -0.0005269429413945923, -0.0001436592540291189, 4.716869597132245e-07],
            [5.93795806989224e-08, -0.00013144659722147834, -0.0005269429413945923,
             9.192800461772371e-07, 2.504978223108563e-07, -5.420240888065475e-10],
            [1.61894569584736e-08, -3.5837045114165295e-05, -0.00014365925402911887,
             2.5049782231085613e-07, 6.852121826791335e-08, -7.402974119136152e-10],
            [-5.5334006740967297e-11, 1.2020141322824615e-07, 4.716869607530471e-07,
             -5.420240901153391e-10, -7.402974111611232e-10, 5.505945921413513e-09]
        ]
    )

    eq_cov_mean_a = np.array(
        [
            [5331023186024109, 30776443.854668032, 123276149.59726535,
             -22785.846667463426, -6212.413081117849, -6710091.910501003],
            [30776443.854668044, 0.1776750255621706, 0.7116835703535914,
             -0.00013144659722147834, -3.5837045114165295e-05, -0.03873792729160286],
            [123276149.59726536, 0.7116835703535914, 2.8506742490366412,
             -0.0005269429413945923, -0.0001436592540291189, -0.15516617427427093],
            [-22785.84666746343, -0.00013144659722147834, -0.0005269429413945923,
             9.192800461772371e-07, 2.504978223108563e-07, 2.8680062879614387e-05],
            [-6212.4130811178475, -3.5837045114165295e-05, -0.00014365925402911887,
             2.5049782231085613e-07, 6.852121826791335e-08, 7.818403737861433e-06],
            [-6710091.91050005, -0.03873792729160366, -0.15516617427426568,
             2.868006287961387e-05, 7.818403737862714e-06, 0.008445916682340737]
        ]
    )

    eq_tm_base = np.array(
        # All but the first row
        [
            [0, 0.9505279674685699, 0, 0.009657784996993584, 0.009657784996993584, 0],
            [0, -0.3106389915320826, 0, 0.029551971882746268, 0.029551971882746268, 0],
            [0, 0, 0.4204124819169607, -0.00027763103819112634, 0, 0],
            [0, 0, -0.2706537946831403, -0.0004312503874544222, 0, 0],
            [0, 0, 0, 1, 1, 1]
        ]
    )

    class_tm_base = np.array(
        # All but the first row
        [
            [0, 0.9505279674685702, -0.31063899153208246, 0, 0, 0],
            [0, 0, 0, 1.6816490429323554, -1.0826146091561857, 0],
            [0, 0, 0, -1055.4070397050114, -1639.3869279182743, 0],
            [0, 9.991585346961854, 30.573371568055485, 1055.4070397050114,
             1639.3869279182743, 0],
            [0, -9.991585346961854, -30.573371568055485, 0, 0, 1]
        ]
    )

    # fmt: on

    @pytest.mark.parametrize(
        "class_cov, class_state, fr, anom_type, tm_exp, eqcov_exp",
        # fmt: off
        [
            (
                class_cov_true(),
                class_state_true(),
                1,
                fc.AnomalyType.TRUE_N,
                np.vstack([[-2.605985266446659e-12, 0, 0, 0, 0, 0], eq_tm_base]),
                eq_cov_true_n
            ),
            (
                class_cov_mean(),
                class_state_mean(),
                1,
                fc.AnomalyType.MEAN_A,
                np.vstack([[1, 0, 0, 0, 0, 0], eq_tm_base]),
                eq_cov_mean_a
            ),
            (
                class_cov_mean(),
                class_state_mean(),
                -1,
                fc.AnomalyType.MEAN_A,
                [
                    [1, 0, 0, 0, 0, 0],
                    [0, -0.1107210569457745, 0,
                     0.030898903804508025, -0.030898903804508025, 0],
                    [0, 0.9938515218828265, 0,
                     0.003442324343599778, -0.003442324343599778, 0],
                    [0, 0, -1598186.9170174072, -1055.4070397050164, 0, 0],
                    [0, 0, 1028883.2332745728, -1639.3869279182795, 0, 0],
                    [0, 0, 0, -1, 1, 1]
                ],
                [
                    [5331023186024109, -122842054.57953845, -22781783.586050514,
                     14360522775.290115, -88625586743.626, -75175875.45948744],
                    [-122842054.57953848, 2.8377210133613957, 0.5257376925906649,
                     -282.89529931273466, 1745.3821073724225, 1.5029322942912415],
                    [-22781783.586050514, 0.525737692590665, 0.09744237174880306,
                     -56.09176784446154, 346.075973942842, 0.2960203328304942],
                    [14360522775.290123, -282.8952993127345, -56.09176784446151,
                     368880.27724641, -2253735.96524965, -1757.1026349871827],
                    [-88625586743.626, 1745.3821073724225, 346.075973942842,
                     -2253735.9652496492, 13906034.259152379, 10854.100743283634],
                    [-75175875.45948648, 1.5029322942912464, 0.29602033283049556,
                     -1757.1026349871845, 10854.100743283645, 8.480636819478143]
                ],
            )
        ]
        # fmt: on
    )
    def test_covcl2eq(self, class_cov, class_state, fr, anom_type, tm_exp, eqcov_exp):
        # Test covariance conversion
        eqcov, tm = fc.covcl2eq(class_cov, class_state, fr, anom_type)

        # Compare results
        assert custom_allclose(eqcov, np.array(eqcov_exp))
        assert custom_allclose(tm, np.array(tm_exp))

    @pytest.mark.parametrize(
        "eq_cov, eq_state, fr, anom_type, tm_exp, classcov_exp",
        # fmt: off
        [
            (
                eq_cov_true_n,
                eq_state_true_n(),
                1,
                fc.AnomalyType.TRUE_N,
                np.vstack([[-383732023690.03735, 0, 0, 0, 0, 0], class_tm_base]),
                class_cov_true()
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a(),
                1,
                fc.AnomalyType.MEAN_A,
                np.vstack([[1, 0, 0, 0, 0, 0], class_tm_base]),
                class_cov_mean()
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a(),
                -1,
                fc.AnomalyType.MEAN_A,
                [
                    [1, 0, 0, 0, 0, 0],
                    [0, 0.9505279674685702, -0.31063899153208246, 0, 0, 0],
                    [0, 0, 0, -1.6816490429323554, 1.0826146091561857, 0],
                    [0, 0, 0, -1055.4070397050114, -1639.3869279182743, 0],
                    [0, 9.991585346961854, 30.573371568055485,
                     -1055.4070397050114, -1639.3869279182743, 0],
                    [0, -9.991585346961854, -30.573371568055485, 0, 0, 1]
                ],
                [
                    [5331023186024110, -9040508.167764392, 31592.148081011983,
                     34232891.77449304, 4110705884.3407645, -4083183084.4767847],
                    [-9040508.167764392, 0.015331208062918732, -5.3721460601286505e-05,
                     -0.058207412772983705, -6.971213627626803, 6.9243853954578585],
                    [31592.148081011983, -5.3721460601286505e-05, 1.767881070192675e-06,
                     0.0019143196050926594, 0.026072352389218727, -0.02419779826631197],
                    [34232891.77449304, -0.05820741277298369, 0.0019143196050926598,
                     2.07496119655159, 28.25158670453334, -26.219712037129188],
                    [4110705884.3407645, -6.971213627626803, 0.026072352389218727,
                     28.251586704533345, 3171.5847002791575, -3148.507206511361],
                    [-4083183084.4767847, 6.924385395457858, -0.02419779826631198,
                     -26.21971203712919, -3148.507206511361, 3127.4269467985036]
                ],
            )
        ]
        # fmt: on
    )
    def test_coveq2cl(self, eq_cov, eq_state, fr, anom_type, tm_exp, classcov_exp):
        # Test covariance conversion
        classcov, tm = fc.coveq2cl(eq_cov, eq_state, fr, anom_type)

        # Compare results
        assert custom_allclose(classcov, np.array(classcov_exp))
        assert custom_allclose(tm, np.array(tm_exp))


class TestFlightCartesian:
    # fmt: off
    flcov_latlon = np.array(
        [
            [1.0883567059765465e-07, -2.4648720677173544e-08, -5.0788923011001195e-09,
             -6.505021243065809e-10, 7.039625138133815, 0.0005108287705099376],
            [-2.464872067717354e-08, 5.879500790159742e-09, 1.2481764470383299e-09,
             1.5358534332993033e-10, -1.6519622216648082, -0.00012043162458763846],
            [-5.078892301100135e-09, 1.248176447038331e-09, 0.008374102968607102,
             -5.941656352563438e-05, -0.33768416998404877, -244.41693377498171],
            [-6.505021243065809e-10, 1.5358534332993033e-10, -5.94165635256344e-05,
             3.950226823514596e-06, -0.043176717726581305, 1.7279198348281204],
            [7.039625138133814, -1.6519622216648082, -0.3376841699840489,
             -0.04317671772658131, 467373780.37122524, 33917.46568190547],
            [0.0005108287705099377, -0.00012043162458763847, -244.4169337749818,
             1.7279198348281208, 33917.46568190547, 7133885.581683842]
        ]
    )

    flcov_radec = np.array(
        [
            [5.507136039838392e-09, -1.1399655720883035e-09, -5.766104151460021e-10,
             -7.506387828610423e-11, 0.8103026599250637, 5.875693365269568e-05],
            [-1.1399655720883031e-09, 9.747003637887425e-10, 5.366459884434408e-10,
             6.265580156852079e-11, -0.6674651097650145, -4.898688798414044e-05],
            [-5.766104151460069e-10, 5.3664598844344e-10, 0.008374102968607102,
             -5.941656352563438e-05, -0.33768416998404877, -244.41693377498171],
            [-7.50638782861043e-11, 6.265580156852079e-11, -5.94165635256344e-05,
             3.950226823514596e-06, -0.043176717726581305, 1.7279198348281204],
            [0.8103026599250636, -0.6674651097650146, -0.3376841699840489,
             -0.04317671772658131, 467373780.37122524, 33917.46568190547],
            [5.875693365269569e-05, -4.898688798414044e-05, -244.4169337749818,
             1.7279198348281208, 33917.46568190547, 7133885.581683842]
        ]
    )

    flt_state_base = [
        0.0310896570389561,  # fpa, rad
        1.57011021365369,    # az, rad
        42112.1327406289,    # rmag, km
        3.07566631469422     # vmag, km/s
    ]

    flt_state_latlon = [
        0.697852034288512,   # lon, rad
        0.113526309755656,   # latgc, rad
        *flt_state_base
    ]

    flt_state_radec = [
        1.30467913594635,   # ra, rad
        -0.000762543260628765,   # dec, rad
        *flt_state_base
    ]

    @pytest.fixture
    def orbit_effects(self):
        ttt = 0.308148718799587
        jdut1 = 2462799.5
        xp, yp = 0.0987, 0.286
        ddpsi = ddeps = lod = 0
        return ttt, jdut1, lod, xp, yp, ddpsi, ddeps

    @pytest.fixture()
    def iau80arr(self):
        """Load the IAU 1980 data"""
        return iau80in()

    # fmt: on

    @pytest.mark.parametrize(
        "use_latlon, tm_exp, flcov_exp",
        # fmt: off
        [
            (
                True,
                [
                    [-1.5357486631635204e-08, 1.831273835930753e-08, 0, 0, 0, 0],
                    [-2.061160710457601e-09, -1.728537121834426e-09,
                     2.3593267354538505e-08, 0, 0, 0],
                    [-2.2910236755065528e-08, 6.244939943599752e-09,
                     1.6292522920169198e-11, 9.52153255576222e-05,
                     0.00031087829509313504, -2.547422867190293e-07],
                    [1.8107010570151465e-11, -4.351970580555423e-12,
                     7.384964681326488e-10, -2.8056279837979433e-07,
                     -1.806211501670178e-07, -0.00032528982320147794],
                    [0.2629872205288504, 0.9647990155293474, -0.0007625431867291463,
                     0, 0, 0],
                    [0, 0, 0,
                     -0.9561578321907049, 0.2928510911592657, 0.0006620779404031189]
                ],
                flcov_latlon
            ),
            (
                False,
                [
                    [-2.291025207570586e-08, 6.2449312426997765e-09, 0, 0, 0, 0],
                    [4.762028386218741e-12, 1.747005154740069e-11,
                     2.374611885422565e-08, 0, 0, 0],
                    [-2.2910236755065528e-08, 6.244939943599752e-09,
                     1.6292522920169198e-11, 9.52153255576222e-05,
                     0.00031087829509313504, -2.547422867190293e-07],
                    [1.8107010570151465e-11, -4.351970580555423e-12,
                     7.384964681326488e-10, -2.8056279837979433e-07,
                     -1.806211501670178e-07, -0.00032528982320147794],
                    [0.2629872205288504, 0.9647990155293474, -0.0007625431867291463,
                     0, 0, 0],
                    [0, 0, 0,
                     -0.9561578321907049, 0.2928510911592657, 0.0006620779404031189]
                ],
                flcov_radec
            )
        ]
        # fmt: on
    )
    def test_covct2fl(
        self, cartcov, cartstate, orbit_effects, iau80arr, use_latlon, tm_exp, flcov_exp
    ):
        # Test covariance conversion
        flcov, tm = fc.covct2fl(
            cartcov, cartstate, *orbit_effects, iau80arr, use_latlon=use_latlon
        )

        # Expected values
        assert custom_allclose(flcov, flcov_exp)
        assert custom_allclose(tm, np.array(tm_exp))

    @pytest.mark.parametrize(
        "use_latlon, flt_cov, flt_state, tm_exp, cartcov_exp",
        # fmt: off
        [
            (
                True,
                flcov_latlon,
                flt_state_latlon,
                [
                    [-26885942.79258054, -3655327.792114417, 0,
                     0, 0.26298722052885054, 0],
                    [32059623.27778461, -3065442.5679112067, 0,
                     0, 0.9647990155293475, 0],
                    [0, 41841048.79851104, 0, 0, -0.0007625431867287644, 0],
                    [-2416.3953797676754, -9.904332870788263, 900.7106317278258,
                     -2.651481948467394, 0, -0.9561578321907049],
                    [-1902.7846863181308, -8.306002994963741, 2940.8226451355276,
                     -1.7069751297820244, 0, 0.29285109115926594],
                    [0, 94.75163353777806, -2.4097915399086673,
                     -3074.17839862028, 0, 0.0006620779404065998]
                ],
                [
                    [9857178.200881273, -90395565.5805006, 8697367.761353228,
                     6598.570794583315, 718.029810143528, -0.5409382321210519],
                    [-90395565.58050054, 997070417.138252, -101024661.4418244,
                     -72746.10349253757, -6647.303713866126, -0.040457803641487544],
                    [8697367.761353228, -101024661.4418244, 10398770.908869572,
                     7392.668748596456, 641.6403179283589, 0.09247423484085626],
                    [6598.57079458332, -72746.10349253759, 7392.668748596455,
                     6949867.908042358, -1352585.055781341, 0.3916092428216871],
                    [718.0298101435287, -6647.303713866127, 641.6403179283595,
                     -1352585.055781341, 263241.2248985778, 2.0121510703946797],
                    [-0.5409382321210754, -0.04045780364147272, 0.092474234840851,
                     0.39160924281989673, 2.012151070395126, 33.37336200198301]
                ],
            ),
            (
                False,
                flcov_radec,
                flt_state_radec,
                [
                    [-40629744.21, 8445.132210538966, 0, 0, 0.26298722052884715, 0],
                    [11074952.739999857, 30981.943633452876, 0,
                     0, 0.9647990155293484, 0],
                    [0, 42112120.497111745, 0, 0, -0.0007625431867291461, 0],
                    [-900.7122362999903, -0.5355291378664989, 900.7106317278156,
                     -2.6514819484676964, 0, -0.9561578321907059],
                    [-2940.822436000003, -1.9646505406683983, 2940.822645135531,
                     -1.7069751297831657, 0, 0.2928510911592626],
                    [0, 95.60758814153121, -2.409791539909841,
                     -3074.17839862028, 0, 0.000662077940406588]
                ],
                cartcov()  # really close
            )
        ]
        # fmt: on
    )
    def test_covfl2ct(
        self,
        orbit_effects,
        iau80arr,
        use_latlon,
        flt_cov,
        flt_state,
        tm_exp,
        cartcov_exp,
    ):
        # Test covariance conversion
        cartcov_out, tm = fc.covfl2ct(
            flt_cov, flt_state, *orbit_effects, iau80arr, use_latlon=use_latlon
        )

        # Compare results
        # Use higher absolute tolerance due to machine precision errors
        assert custom_allclose(cartcov_out, np.array(cartcov_exp), atol=1e-6)
        assert custom_allclose(tm, np.array(tm_exp))


class TestSatCoord:
    def test_covct2rsw(self, cartcov, cartstate):
        # Test covariance conversion
        covrsw, tm = fc.covct2rsw(cartcov, cartstate)

        # Expected values
        tm_exp = np.array(
            [
                [0.26298722052885, 0.9647990155293474, -0.0007625431867291462, 0, 0, 0],
                [-0.964798931348555, 0.2629877398621285, 0.000686112887893904, 0, 0, 0],
                [0.0008625005480072, 0.000555261930307162, 0.9999994738883583, 0, 0, 0],
                [0, 0, 0, 0.26298722052885, 0.9647990155293474, -0.0007625431867291462],
                [0, 0, 0, -0.964798931348555, 0.2629877398621285, 0.000686112887893904],
                [0, 0, 0, 0.0008625005480072, 0.000555261930307162, 0.9999994738883583],
            ]
        )
        # fmt: off
        covoprsw_exp = np.array(
            [
                [467373780.3712252, 34104269.69513586, -28131785.309472024,
                 -2473.396507080248, 34010.78586784423, 66.9666829895545],
                [34104269.69513586, 9763746.137283769, -2027163.5665480944,
                 -710.4814009823186, 2496.2544419237756, 4.566424991855891],
                [-28131785.30947203, -2027163.5665480946, 1731342.491490899,
                 153.32961072346302, -2070.40625710878, -4.074574843530568],
                [-2473.396507080246, -710.4814009823189, 153.32961072346302,
                 39320.49060041467, -531106.423120838, 396.40114518077286],
                [34010.78586784423, 2496.2544419237756, -2070.4062571087798,
                 -531106.4231208381, 7173781.8508625, -5326.837605675035],
                [66.96668298955449, 4.566424991855886, -4.074574843530568,
                 396.40114518077297, -5326.837605675035, 37.331917082529586]
            ]
        )

        # Compare results
        assert custom_allclose(covrsw, covoprsw_exp)
        assert custom_allclose(tm, tm_exp)

    def test_covct2ntw(self, cartcov, cartstate):
        # Test covariance conversion
        covntw, tm = fc.covct2ntw(cartcov, cartstate)

        # Expected values
        tm_exp = np.array(
            [
                [0.292850569460222, 0.9561579001875247, -0.000783502270189895, 0, 0, 0],
                [-0.956157832190705, 0.2928510911592657, 0.000662077940403119, 0, 0, 0],
                [0.0008625005480072, 0.000555261930307162, 0.9999994738883584, 0, 0, 0],
                [0, 0, 0, 0.292850569460222, 0.9561579001875247, -0.000783502270189895],
                [0, 0, 0, -0.956157832190705, 0.2928510911592657, 0.000662077940403119],
                [0, 0, 0, 0.0008625005480072, 0.000555261930307162, 0.9999994738883584],
            ]
        )
        # fmt: off
        covntw_exp = np.array(
            [
                [464812398.29949164, 48256136.09535531, -28055177.112280603,
                 -3503.222607949419, 33824.20406548627, 66.79237599325076],
                [48256136.09535535, 12325128.209017547, -2900650.6205217475,
                 -897.0632033402854, 3526.080542792949, 6.645854121627563],
                [-28055177.1122806, -2900650.6205217475, 1731342.4914908994,
                 217.61336664036213, -2064.639547635191, -4.074574843530569],
                [-3503.2226079494203, -897.0632033402858, 217.6133666403622,
                 79216.75977907518, -751745.110565811, 561.7924632926649],
                [33824.20406548627, 3526.080542792949, -2064.639547635191,
                 -751745.110565811, 7133885.581683842, -5311.941450479471],
                [66.79237599325077, 6.6458541216275595, -4.074574843530569,
                 561.7924632926649, -5311.941450479471, 37.3319170825296]
            ]
        )

        # Compare results
        assert custom_allclose(covntw, covntw_exp)
        assert custom_allclose(tm, tm_exp)
