import numpy as np

import src.valladopy.astro.perturbations.utils as utils

from ...conftest import custom_allclose


def test_legpolyn():
    # Define input values
    latgc = np.radians(30.6103084177511)
    order = 5

    # Call leg_polyn method
    legarr_mu, legarr_gu, legarr_mn, legarr_gn = utils.legpolyn(latgc, order)

    # Expected results
    # fmt: off
    legarr_mu_exp = np.array([
        [1, 0, 0, 0, 0, 0],
        [0.5091962686273478, 0.8606504284644177, 0, 0, 0, 0],
        [-0.11107874002397877, 1.314719960299829, 2.2221574800479575, 0, 0, 0],
        [-0.43373231232496057, 0.38265060248979266, 5.6575714857138495,
         9.562503936593428, 0, 0],
        [-0.3031869762652333, -1.2983233427895509, 4.52745631494301,
         34.084339262733884, 57.609811771552714, 0],
        [0.06909883124077135, -1.9657914067577456, -4.39905138560079,
         44.631518892380164, 264.0123107135865, 446.2371826644717]
    ])
    legarr_mn_exp = np.array([
        [1, 0, 0, 0, 0, 0],
        [0.8819538082870567, 1.490690269656295, 0, 0, 0, 0],
        [-0.24837961354864316, 1.697296170389238, 1.4343964854793299, 0., 0, 0],
        [-1.147547833984841, 0.4133098888043146, 1.9324285489668902,
         1.33342746622041, 0, 0],
        [-0.9095609287956998, -1.2316976707735587, 1.0123700085373268,
         2.036928870853955, 1.2172294383209188, 0],
        [0.22917489667772642, -1.6834031880629696, -0.7119192437226732,
         1.4743742708621626, 2.0556728600854277, 1.0987416280897822]
    ])
    # fmt: on

    # Check results
    assert custom_allclose(legarr_mu, legarr_mu_exp)
    assert custom_allclose(legarr_gu, legarr_mu_exp)
    assert custom_allclose(legarr_mn, legarr_mn_exp)
    assert custom_allclose(legarr_gn, legarr_mn_exp)


def test_trigpoly():
    recef = np.array([6524.834, 6862.875, 6448.296])
    latgc = np.radians(32.5)
    lon = np.radians(44.4)
    order = 8

    # Call trigpoly method
    trig_arr, v_arr, w_arr = utils.trigpoly(recef, latgc, lon, order)

    # Check results
    assert custom_allclose(
        trig_arr,
        np.array(
            [
                [0, 1, 0],
                [0.6996633405133654, 0.7144726796328034, 0],
                [0.9997806834748455, 0.02094241988335699, 1.2741405216149864],
                [0.7289686274214116, -0.6845471059286886, 1.9112107824224795],
                [0.04187565372919955, -0.9991228300988583, 2.5482810432299727],
                [-0.6691306063588583, -0.7431448254773941, 3.185351304037466],
                [-0.9980267284282717, -0.06279051952931336, 3.8224215648449595],
                [-0.7569950556517565, 0.6534206039901054, 4.459491825652452],
                [-0.08367784333231543, 0.9964928592495043, 5.0965620864599455],
            ]
        ),
    )
    assert custom_allclose(
        v_arr,
        np.array(
            [
                [0.5567229456811682, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0.16653087608144873, 0.17651964099167233, 0, 0, 0, 0, 0, 0, 0, 0],
                [-0.002969423260645143, 0, 0.2298252355060661, 0, 0, 0, 0, 0, 0, 0],
                [-0.036060252753553866, 0, 0, 0.4428821269662462, 0, 0, 0, 0, 0, 0],
                [-0.020355149796396365, 0, 0, 0, 1.1330274550692048, 0, 0, 0, 0, 0],
                [-0.0032778227992070457, 0, 0, 0, 0, 3.6155399106772506, 0, 0, 0, 0],
                [0.0032533123531603395, 0, 0, 0, 0, 0.0, 13.827112909836652, 0, 0, 0],
                [0.0028857346435441707, 0, 0, 0, 0, 0, 0, 61.6405956973825, 0, 0],
                [0.0009221724880043109, 0, 0, 0, 0, 0, 0, 0, 313.8557548691445, 0],
                [-0.00021411708825645867, 0, 0, 0, 0, 0, 0, 0, 0, 1796.9993339180005],
            ]
        ),
    )

    assert custom_allclose(
        w_arr,
        np.array(
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, -0.1856648354840481, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, -0.23547432602636975, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, -0.44995393839655023, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, -1.1463648047431974, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, -3.649151711480955, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, -13.933133407306409, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, -62.04224399565824, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, -315.63206073851455, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, -1805.9815419727986],
            ]
        ),
    )
