import numpy as np
import pytest

import src.valladopy.astro.covariance.frame_conversions as fc

from ...conftest import custom_allclose


@pytest.fixture
def cartcov():
    return np.array(
        [
            [24097166, 86695628, -5509927, -6294.97, 1752.326, 17.65861],
            [86695628, 453000000, -28000000, -32967.4, 6319.431, 90.73355],
            [-5509927, -28000000, 1771703, 2061.582, -401.582, -5.67764],
            [-6294.97, -32967.4, 2061.582, 6949865, -1352586, 0.385006],
            [1752.326, 6319.431, -401.582, -1352586, 263241.3, 2.013476],
            [17.65861, 90.73355, -5.67764, 0.385006, 2.013476, 33.37338],
        ]
    )


@pytest.fixture
def cartstate():
    return np.array(
        [
            11074.95274,
            40629.74421,
            -32.1123199,
            -2.940822436,
            0.9007122363,
            0.002036330819,
        ]
    )


class TestClassical:
    classcov_lastrow_mean = [
        -4083183084.476787,
        6.924385395457872,
        0.024197798266311993,
        -26.219712037129213,
        -3096.0677824371114,
        3127.4269467985023,
    ]

    classcov_lastrow_true = [
        -4076472971.3328567,
        6.913006182584299,
        0.024158032674088642,
        -26.176623722291907,
        -3090.979848722306,
        3117.1564568280405,
    ]

    # fmt: off
    @pytest.fixture
    def class_cov_base(self):
        return [
            [5331023186024109.0, -9040508.167764489, -31592.14808101208,
             34232891.77449311, 4042240100.791793],
            [-9040508.167764485, 0.015331208062918465, 5.372146060128627e-05,
             -0.058207412772983746, -6.854798802080871],
            [-31592.148081012085, 5.3721460601286275e-05, 1.7678810701926767e-06,
             -0.0019143196050926616, -0.02224371317903348],
            [34232891.77449311, -0.05820741277298375, -0.0019143196050926614,
             2.0749611965515924, 24.101664311430255],
            [4042240100.791794, -6.854798802080872, -0.02224371317903348,
             24.101664311430255, 3066.878198247249],
        ]

    @pytest.fixture
    def class_tm_base(self):
        return [
            [0.5253644964759826, 1.9273603788610492, -0.001523317811913225,
             -26137.953191986773, 8005.506889386072, 18.098855265405795],
            [-2.301155985975573e-08, 5.8138513632311184e-09, 1.6619281402670584e-11,
             0.00010674050364398441, 0.00030712477953877607, -2.6259857897553283e-07],
            [-1.5651228313484214e-11, -1.0075971851611348e-11, -1.814633059178445e-08,
             1.876600229186106e-07, 1.208120584130285e-07, 0.00021757658550672633],
            [-1.2893279250251951e-08, -8.30045516031882e-09, -1.494871220283562e-05,
             -0.00020332310643289575, -0.0001308956624025655, -0.23573666119055636],
            [1.9975551200319462e-07, 7.480373001058164e-07, 1.4948132421348424e-05,
             -0.01980854835831763, 0.006124227038806058, 0.2357504695553114],
        ]
    # fmt: on

    @pytest.fixture
    def class_state_base(self):
        return [
            42087.7080574158,
            0.0310900603602949,
            0.00102577939911935,
            2.14278761707691,
            3.82453248238077,
        ]

    @pytest.mark.parametrize(
        "use_mean_anom, tm_lastrow, cov_lastrow",
        [
            (
                # fmt: off
                True,
                [-2.1012648980705486e-07, -7.34696403701101e-07, 5.891834658944977e-10,
                 0.020044836175870634, -0.006003072956312084, -1.3955411651010935e-05],
                classcov_lastrow_mean,
            ),
            (
                # fmt: off
                False,
                [-2.0977247629131585e-07, -7.334919093688606e-07, 5.882093186826968e-10,
                 0.02001187135777983, -0.005993331445269153, -1.3932388555455746e-05],
                classcov_lastrow_true,
            ),
        ],
    )
    def test_covct2cl(
        self,
        cartcov,
        cartstate,
        class_cov_base,
        class_tm_base,
        use_mean_anom,
        tm_lastrow,
        cov_lastrow,
    ):
        # Update matrices
        # For covariance, last row == last column
        tm_expected = np.vstack([class_tm_base, tm_lastrow])
        cov_expected = np.column_stack(
            [np.vstack([class_cov_base, cov_lastrow[:-1]]), cov_lastrow]
        )

        # Test covariance conversion
        classcov, tm = fc.covct2cl(cartcov, cartstate, use_mean_anom=use_mean_anom)

        # Compare results
        assert custom_allclose(classcov, cov_expected)
        assert custom_allclose(tm, tm_expected)

    @pytest.mark.parametrize(
        "use_mean_anom, anom_rad, cov_lastrow, tm_exp, cartcov_exp",
        # fmt: off
        [
            (
                True,
                1.55837880318832,
                classcov_lastrow_mean,
                np.array(
                    [[0.26313983942512426, -122181.09461831323, -27000.833116307094,
                      -40629744.21000002, -40629740.66496733, -40219144.61841942],
                     [0.9653589155905844, -510035.2045932821, -17382.637901740887,
                      11074952.739999903, 11074974.61023185, 12318280.508156924],
                     [-0.000762985712046392, 388.5845977374862, -31305277.396918915,
                      0.0, 28893.677010573563, 27849.176713029363],
                     [3.493683276822948e-05, 865.2314914318102, 1.71219733686734,
                      -900.7122362999926, -900.7106317278178, -808.3919389536693],
                     [-1.0700419170738e-05, 2955.794755743881, 1.1022810368438238,
                      -2940.822436000001, -2940.8226451355285, -2965.6792649314566],
                     [-2.4191514732274634e-08, -2.387504193316633, 1985.1540268409651,
                      0.0, 2.409791539953639, 2.3439685169019615]]
                ),
                np.array(
                    [[24098442.580799103, 86695218.21947145, -5509927.873355819,
                      -6294.930929586146, 1752.417985989945, 17.658533888831073],
                     [86695551.13614655, 453000033.8695812, -27999999.954731148,
                      -32967.40471932187, 6319.425707785413, 90.7335547196626],
                     [-5509927.0577840805, -27999999.943911552, 1771703.0000502856,
                      2061.5921072992423, -401.5839722053788, -5.677635830610768],
                     [-6294.951171875, -32967.40576171875, 2061.5921034812927,
                      6949865.000000715, -1352585.999998629, 0.38500535738421604],
                     [1752.479736328125, 6319.385314941406, -401.58407604694366,
                      -1352585.9999958351, 263241.3000110984, 2.013476115767844],
                     [17.658579101844225, 90.73356022074586, -5.677635813602592,
                      0.3850053571416687, 2.01347612272229, 33.37338000069615]]
                ),
            ),
            (
                False,
                1.62054408207275,
                classcov_lastrow_true,
                np.array(
                    [[0.26313983942513086, -137728.61043798938, -27000.833116307254,
                      -40629744.20999994, -40629740.66496724, -40285313.20469349],
                     [0.9653589155905823, -505273.3265653776, -17382.637901740993,
                      11074952.740000183, 11074974.61023213, 12338546.558424711],
                     [-0.0007629857120463965, 399.3502547305805, -31305277.3969191,
                      0.0, 28893.67701057334, 27894.994212866175],
                     [3.4936832768229415e-05, 864.918991338172, 1.7121973368673264,
                      -900.712236300013, -900.7106317278384, -809.7219063675537],
                     [-1.0700419170738243e-05, 2954.648313030472, 1.1022810368438152,
                      -2940.8224359999954, -2940.822645135523, -2970.558404111681],
                     [-2.4191514732274445e-08, -2.386598085343853, 1985.1540268409494,
                      0.0, 2.409791539953653, 2.347824816793632]]
                ),
                np.array(
                    [[24096124.615553856, 86695907.30600595, -5509926.253087776,
                      -6294.978854407527, 1752.2477284182096, 17.658669530529835],
                     [86696324.15161896, 452999803.3278446, -28000000.491524436,
                      -32967.38936690602, 6319.482606475707, 90.73350950974327],
                     [-5509925.572429657, -28000000.403985977, 1771702.9990295544,
                      2061.592136245985, -401.58386245468864, -5.67763592028615],
                     [-6294.9677734375, -32967.4013671875, 2061.5921149253845,
                      6949865.000000477, -1352585.9999996424, 0.3850053581991233],
                     [1752.24560546875, 6319.4521484375, -401.58391058444977,
                      -1352586.000000529, 263241.29999387264, 2.013476129475748],
                     [17.658705342852045, 90.73352183160023, -5.677635904114169,
                      0.3850053595509486, 2.0134761320387486, 33.37338000068877]]
                ),
            ),
        ],
        # fmt: on
    )
    def test_covcl2ct(
        self,
        class_state_base,
        class_cov_base,
        class_tm_base,
        use_mean_anom,
        anom_rad,
        cov_lastrow,
        tm_exp,
        cartcov_exp,
    ):
        # Define classical inputs
        class_state = np.array([*class_state_base, anom_rad])

        # Update covariance (last row == last column)
        class_cov = np.column_stack(
            [np.vstack([class_cov_base, cov_lastrow[:-1]]), cov_lastrow]
        )

        # Test covariance conversion
        cartcov, tm = fc.covcl2ct(class_cov, class_state, use_mean_anom=use_mean_anom)

        # Compare results
        # NOTE: The covariance seems very sensitive to machine precision, so we use a
        #       higher absolute tolerance for this test
        assert custom_allclose(cartcov, cartcov_exp, atol=1e-3)
        assert custom_allclose(tm, tm_exp)


class TestEquinoctial:
    # fmt: off
    eq_cov_true_n = [
        [3.620382720282475e-08, -8.020295923888982e-05, -0.0003212558295547466,
         5.9379580707639784e-08, 1.618945695186506e-08, 0.0],
        [-8.020295923888982e-05, 0.17767502556217937, 0.7116835703536055,
         -0.000131446597240794, -3.583704509952729e-05, 0.0],
        [-0.0003212558295547466, 0.7116835703536054, 2.8506742490366133,
         -0.000526942941471943, -0.0001436592539704766, 0.0],
        [5.937958070763978e-08, -0.00013144659724079397, -0.0005269429414719431,
         9.192800461932832e-07, 2.504978222924519e-07, 0.0],
        [1.6189456951865057e-08, -3.58370450995273e-05, -0.00014365925397047657,
         2.504978222924519e-07, 6.852121825668235e-08, 0.0],
        [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
    ]

    eq_state_true_n = [
        7.3119964730756e-05,
        0.0295519718827463,
        -0.00965778499699359,
        0.000431250387454424,
        -0.000277631038191127,
        1.30467887435085
    ]

    eq_cov_mean_a = [
        [5331023186024117.0, 30776443.85466882, 123276149.59726484,
         -22785.846670808547, -6212.4130785819325, 11385265.073260155],
        [30776443.854668826, 0.17767502556217937, 0.7116835703536055,
         -0.000131446597240794, -3.583704509952729e-05,
         0.06572803376592073],
        [123276149.59726484, 0.7116835703536054, 2.8506742490366133,
         -0.000526942941471943, -0.0001436592539704766,
         0.26327631579518807],
        [-22785.84667080855, -0.00013144659724079397, -0.0005269429414719431,
         9.192800461932832e-07, 2.504978222924519e-07, -4.8872111603682685e-05],
        [-6212.4130785819325, -3.58370450995273e-05, -0.00014365925397047657,
         2.504978222924519e-07, 6.852121825668235e-08, -1.3322454764827869e-05],
        [11385265.073260156, 0.06572803376592073, 0.2632763157951882,
         -4.887211160368268e-05, -1.3322454764827875e-05, 0.024315241765525693]
    ]

    eq_state_mean_a = [42087.7080574158, *eq_state_true_n[1:5], 1.24251359546641]

    # fmt: on

    @pytest.fixture(name="eq_cov_true_n")
    def eq_cov_true_n_fix(self):
        return self.eq_cov_true_n

    @pytest.fixture(name="eq_state_true_n")
    def eq_state_true_n_fix(self):
        return self.eq_state_true_n

    @pytest.fixture(name="eq_cov_mean_a")
    def eq_cov_mean_a_fix(self):
        return self.eq_cov_mean_a

    @pytest.fixture(name="eq_state_mean_a")
    def eq_state_mean_a_fix(self):
        return self.eq_state_mean_a

    @pytest.mark.parametrize(
        # fmt: off
        "fr, use_mean_anom, tm_exp, cov_exp",
        [
            (
                1,
                False,
                np.array(
                    [
                        [-1.3690921373305804e-12, -5.022672750444952e-12,
                         3.969743773961633e-15, 6.811512091339006e-08,
                         -2.086223300417736e-08, -4.7165350161198116e-11],
                        [-2.0068455953788673e-08, 1.2670447722294537e-08,
                         1.0197686823076022e-11, -9.18105180187478e-05,
                         0.0003498129983032651, -1.1624907558308972e-07],
                        [1.267043519667704e-08, 2.0054673518069036e-08,
                         -2.229628302516436e-11, -0.0006245480252550316,
                         8.170982852901403e-05, 4.896377646967924e-07],
                        [-3.000397236679245e-12, -1.9316003510677005e-12,
                         -3.478717393360175e-09, 1.3534342113673268e-07,
                         8.713159597219173e-08, 0.00015691972630474597],
                        [9.796296006771089e-12, 6.306674521132766e-12,
                         1.1358011163540663e-08, 3.68922711006994e-08,
                         2.375056307166365e-08, 4.2773597972181366e-05],
                        [0, 0, 0, 0, 0, 0]
                    ]
                ),
                eq_cov_true_n
            ),
            (
                -1,
                False,
                np.array(
                    [
                        [-1.3690921373305804e-12, -5.022672750444952e-12,
                         3.969743773961633e-15, 6.811512091339006e-08,
                         -2.086223300417736e-08, -4.7165350161198116e-11],
                        [-4.022750315581222e-09, -2.4013723311637738e-08,
                         -9.237815663664927e-07, 0.0005939615477391202,
                         -0.00022728161483621782, -0.014568406425328312],
                        [-2.3602079898300232e-08, 3.1745451584017257e-09,
                         -1.0289811896648058e-07, 0.00017357175613918577,
                         0.0002837042684058097, -0.0016232726121407765],
                        [3.86212460269652e-05, 2.4863645210833514e-05,
                         0.04477820425402866, -0.08532715571983353,
                         -0.05493204763995006, -98.9299207117852],
                        [5.033787069961052e-06, 3.240659187614189e-06,
                         0.005836268084997266, 0.5264054942093714,
                         0.33889013927507794, 610.324501796048],
                        [0, 0, 0, 0, 0, 0]
                    ]
                ),
                np.array(
                    [
                        [3.620382720282475e-08, 0.000320124584333352,
                         5.9368992368515214e-05, -0.03742331082188849,
                         0.23095697339285887, 0],
                        [0.000320124584333352, 2.8377210133468544, 0.5257376925883985,
                         -282.8952997336925, 1745.3821081654376, 0],
                        [5.9368992368515214e-05, 0.5257376925883985,
                         0.09744237174847635, -56.09176792478839, 346.0759741025573, 0],
                        [-0.03742331082188848, -282.8952997336926, -56.09176792478837,
                         368880.277636458, -2253735.9673102433, 0],
                        [0.23095697339285887, 1745.3821081654376, 346.0759741025573,
                         -2253735.9673102433, 13906034.2698353, 0],
                        [0, 0, 0, 0, 0, 0]
                    ]
                )
            ),
            (
                1,
                True,
                np.array(
                    [
                        [0.5253644964759829, 1.9273603788610505, -0.001523317811913226,
                         -26137.9531919868, 8005.50688938608, 18.098855265405813],
                        [-2.0068455953788673e-08, 1.2670447722294537e-08,
                         1.0197686823076022e-11, -9.18105180187478e-05,
                         0.0003498129983032651, -1.1624907558308972e-07],
                        [1.267043519667704e-08, 2.0054673518069036e-08,
                         -2.229628302516436e-11, -0.0006245480252550316,
                         8.170982852901403e-05, 4.896377646967924e-07],
                        [-3.000397236679245e-12, -1.9316003510677005e-12,
                         -3.478717393360175e-09, 1.3534342113673268e-07,
                         8.713159597219173e-08, 0.00015691972630474597],
                        [9.796296006771089e-12, 6.306674521132766e-12,
                         1.1358011163540663e-08, 3.68922711006994e-08,
                         2.375056307166365e-08, 4.2773597972181366e-05],
                        [2.2795365114085697e-08, -6.596483795216146e-09,
                         -2.386294678782899e-11, -0.00018068561497021647,
                         -0.0006244783204972765, 3.785668116986375e-07]
                    ]
                ),
                eq_cov_mean_a
            )
        ],
        # fmt: on
    )
    def test_covct2eq(self, cartcov, cartstate, fr, use_mean_anom, tm_exp, cov_exp):
        # Test covariance conversion
        eqcov, tm = fc.covct2eq(cartcov, cartstate, fr, use_mean_anom=use_mean_anom)

        # Compare results
        assert custom_allclose(eqcov, cov_exp)
        assert custom_allclose(tm, tm_exp)

    @pytest.mark.parametrize(
        "eq_cov, eq_state, fr, anom_type, tm_exp, cartcov_exp",
        # fmt: off
        [
            (
                eq_cov_true_n,
                eq_state_true_n,
                1,
                fc.AnomalyType.TRUE_N,
                np.array(
                    [
                        [201259067933.05347, -82001479.57543981, 12900048.25607875,
                         -41664.472708166824, 35043.176647159205, -36506241.74848718],
                        [-312620129184.17084, 10873068.18217736, -45624716.40816064,
                         -6149.499636585576, 54672.47009893215, -23502044.50114236],
                        [0.0, 64688.95427881771, 14207.376887251487,
                         -22149899.653338224, 81259467.04421845, 44536.467541592494],
                        [-12168747.249495728, -1773.9121518615482, -2860.056384916835,
                         4.722260877394363, 0.8022578798669566, 1774.4690509477857],
                        [-7834014.83371412, -2748.269685428566, 1826.485558897817,
                         1.6863015942984447, -1.5864127728403592, -2756.321738134731],
                        [14845.48918053083, 3.05601134149206, 1.4526230664790183,
                         6073.894350161091, 1860.3064558446156, -0.0]
                    ]
                ),
                np.array(
                    [
                        [2609030091871121.5, 662293657883465.0, -2617957009659.2876,
                         166580272337.64417, -174484257224.26282, 58058172.501122974],
                        [662293657883462.5, 168121674339084.84, -664590474214.5638,
                         42285897838.340576, -44292285700.95308, 14769380.660515677],
                        [-2617957009659.285, -664590474214.5682, 2628679768.067772,
                         -167152461.74384883, 175082415.52000895, -58280.49691913719],
                        [166580272337.64392, 42285897838.34079, -167152461.74384862,
                         10635751.779044999, -11140401.388419641, 3709.973733741031],
                        [-174484257224.26266, -44292285700.95302, 175082415.5200088,
                         -11140401.388419632, 11668997.165476888, -3888.691447165852],
                        [58058172.501123086, 14769380.660515513, -58280.49691913728,
                         3709.973733741027, -3888.6914471658415, 36.89196056210292]
                    ]
                )
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a,
                1,
                fc.AnomalyType.MEAN_A,
                np.array(
                    [
                        [-0.5244781657723259, -82001479.57543989, 12900048.25607889,
                         -41664.472708167086, 35043.17664715923, -36506241.74848718],
                        [0.8146834506486021, 10873068.182177497, -45624716.40816079,
                         -6149.499636585656, 54672.47009893231, -23502044.501142364],
                        [0.0, 64688.95427881771, 14207.37688725145, -22149899.65333851,
                         81259467.04421851, 44536.4675415925],
                        [3.1711576043299176e-05, -1773.9121518615686,
                         -2860.056384916829, 4.722260877394359, 0.8022578798669658,
                         1774.4690509477887],
                        [2.0415327233783575e-05, -2748.2696854285596,
                         1826.4855588978378, 1.6863015942984452, -1.5864127728403485,
                         -2756.321738134735],
                        [-3.868712607765664e-08, 3.0560113414920744, 1.4526230664790016,
                         6073.894350161093, 1860.3064558446367, 0.0]
                    ]
                ),
                np.array(
                    [
                        [3222967917453305.0, 944155803358342.8, -3303984133910.558,
                         169436541121.3681, -169529552978.84833, 64584912.11589565],
                        [944155803358339.5, 276587567030200.3, -967922410447.6935,
                         49635789230.039734, -49663017469.432526, 18971175.135294974],
                        [-3303984133910.556, -967922410447.6968, 3388804849.7748504,
                         -173697223.63692337, 173791313.74274427, -66242.91411366676],
                        [169436541121.36777, 49635789230.03995, -173697223.6369232,
                         8907549.928411111, -8912438.351624563, 3392.7266851459913],
                        [-169529552978.8482, -49663017469.43248, 173791313.74274412,
                         -8912438.351624552, 8917330.511702783, -3395.904640918359],
                        [64584912.1158958, 18971175.13529483, -66242.91411366682,
                         3392.7266851459885, -3395.904640918352, 36.89196056210307]
                    ]
                )
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a,
                -1,
                fc.AnomalyType.MEAN_A,
                np.array(
                    [
                        [-0.5244781657723259, -82001474.3681856, 12900026.405768631,
                         41664.46976308289, -35043.181221823186, 36506241.74848718],
                        [0.8146834506486021, -10873028.910520243, 45624710.23015201,
                         18448.512392800727, -35568.1435402667, 23502044.501142364],
                        [0.0, -76763.73598880075, 36459.96369906112, -22149892.82416389,
                         81259477.6521254, 44536.467541595375],
                        [-3.1711576043299176e-05, -1773.9134680463778,
                         -2860.0555101877994, -4.722260069800937, -0.8022566254143717,
                         1774.4690509477887],
                        [-2.0415327233783575e-05, 2748.27053498028, -1826.4841891769372,
                         -5.058905270085495, -3.6523265676512406, -2756.321738134735],
                        [-3.868712607765914e-08, -0.003991338147869339,
                         -3.4809784128729158, 6073.892477482377, 1860.3035469716697, 0]
                    ]
                ),
                np.array(
                    [
                        [2059907354894879.2, -6154242670970935.0, -1640467867635.4426,
                         345630229904.54065, 174545640304.3555, 488133352.9342482],
                        [-6154242670970934.0, 1.838661697053411e+16, 4901178261563.883,
                         -1032616034444.2095, -521478413672.9735, -1458728859.1500251],
                        [-1640467867635.441, 4901178261563.881, 1308235741.4081857,
                         -275256269.3095366, -139007038.12667027, -388954.6550469429],
                        [345630229904.5404, -1032616034444.2095, -275256269.3095368,
                         57993045.77979807, 29286895.7873687, 81918.34012989723],
                        [174545640304.35547, -521478413672.9733, -139007038.12667024,
                         29286895.787368685, 14790092.580395268, 41376.778227155984],
                        [488133352.9342481, -1458728859.150025, -388954.6550469431,
                         81918.34012989722, 41376.778227156006, 151.3182421571985]
                    ]
                )
            )
        ]
        # fmt: on
    )
    def test_coveq2ct(self, eq_cov, eq_state, fr, anom_type, tm_exp, cartcov_exp):
        cartcov, tm = fc.coveq2ct(eq_cov, eq_state, fr, anom_type)
        assert custom_allclose(cartcov, cartcov_exp)
        assert custom_allclose(tm, tm_exp)
