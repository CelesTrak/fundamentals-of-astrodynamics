import numpy as np
import pytest

import src.valladopy.astro.covariance.frame_conversions as fc

from ...conftest import custom_allclose


@pytest.fixture
def cartcov():
    # Cartesian covariance matrix in m and m/s
    return np.array(
        [
            [24097166, 86695628, -5509927, -6294.97, 1752.326, 17.65861],
            [86695628, 453000000, -28000000, -32967.4, 6319.431, 90.73355],
            [-5509927, -28000000, 1771703, 2061.582, -401.582, -5.67764],
            [-6294.97, -32967.4, 2061.582, 6949865, -1352586, 0.385006],
            [1752.326, 6319.431, -401.582, -1352586, 263241.3, 2.013476],
            [17.65861, 90.73355, -5.67764, 0.385006, 2.013476, 33.37338],
        ]
    )


@pytest.fixture
def cartstate():
    # Cartesian state in km and km/s
    return np.array(
        [
            11074.95274,
            40629.74421,
            -32.1123199,
            -2.940822436,
            0.9007122363,
            0.002036330819,
        ]
    )


# fmt: off
def class_cov_base():
    # Classical covariance matrix in m and radians
    return [
        [5331023186024109.0, -9040508.167764489, -31592.14808101208,
         34232891.77449311, 4042240100.791793],
        [-9040508.167764485, 0.015331208062918465, 5.372146060128627e-05,
         -0.058207412772983746, -6.854798802080871],
        [-31592.148081012085, 5.3721460601286275e-05, 1.7678810701926767e-06,
         -0.0019143196050926616, -0.02224371317903348],
        [34232891.77449311, -0.05820741277298375, -0.0019143196050926614,
         2.0749611965515924, 24.101664311430255],
        [4042240100.791794, -6.854798802080872, -0.02224371317903348,
         24.101664311430255, 3066.878198247249],
    ]


def make_cov(cov_base, last_row):
    return np.column_stack([np.vstack([cov_base, last_row[:-1]]), last_row])


def class_cov_true():
    last_row = [
        -4076472971.3328567, 6.913006182584299, 0.024158032674088642,
        -26.176623722291907, -3090.979848722306, 3117.1564568280405,
    ]
    return make_cov(class_cov_base(), last_row)


def class_cov_mean():
    last_row = [
        -4083183084.476787, 6.924385395457872, 0.024197798266311993,
        -26.219712037129213, -3096.0677824371114, 3127.4269467985023,
    ]
    return make_cov(class_cov_base(), last_row)


def class_state_base():
    # Classical state in km and radians
    return [
        42087.7080574158,
        0.0310900603602949,
        0.00102577939911935,
        2.14278761707691,
        3.82453248238077,
    ]


def class_state_true():
    return [*class_state_base(), 1.62054408207275]


def class_state_mean():
    return [*class_state_base(), 1.55837880318832]


def eq_state_true_n():
    # Equinoctial state in radians
    return [
        7.3119964730756e-05,
        0.0295519718827463,
        -0.00965778499699359,
        0.000431250387454424,
        -0.000277631038191127,
        1.30467887435085
    ]


def eq_state_mean_a():
    # Equinoctial state in km and radians
    return [42087.7080574158, *eq_state_true_n()[1:5], 1.24251359546641]

# fmt: on


class TestClassicalCartesian:
    # fmt: off
    @pytest.fixture
    def class_tm_base(self):
        return [
            [0.5253644964759826, 1.9273603788610492, -0.001523317811913225,
             -26137.953191986773, 8005.506889386072, 18.098855265405795],
            [-2.301155985975573e-08, 5.8138513632311184e-09, 1.6619281402670584e-11,
             0.00010674050364398441, 0.00030712477953877607, -2.6259857897553283e-07],
            [-1.5651228313484214e-11, -1.0075971851611348e-11, -1.814633059178445e-08,
             1.876600229186106e-07, 1.208120584130285e-07, 0.00021757658550672633],
            [-1.2893279250251951e-08, -8.30045516031882e-09, -1.494871220283562e-05,
             -0.00020332310643289575, -0.0001308956624025655, -0.23573666119055636],
            [1.9975551200319462e-07, 7.480373001058164e-07, 1.4948132421348424e-05,
             -0.01980854835831763, 0.006124227038806058, 0.2357504695553114],
        ]
    # fmt: on

    @pytest.mark.parametrize(
        "use_mean_anom, tm_lastrow, cov_expected",
        [
            (
                # fmt: off
                True,
                [-2.1012648980705486e-07, -7.34696403701101e-07, 5.891834658944977e-10,
                 0.020044836175870634, -0.006003072956312084, -1.3955411651010935e-05],
                class_cov_mean(),
            ),
            (
                # fmt: off
                False,
                [-2.0977247629131585e-07, -7.334919093688606e-07, 5.882093186826968e-10,
                 0.02001187135777983, -0.005993331445269153, -1.3932388555455746e-05],
                class_cov_true(),
            ),
        ],
    )
    def test_covct2cl(
        self, cartcov, cartstate, class_tm_base, use_mean_anom, tm_lastrow, cov_expected
    ):
        # Update matrices
        # For covariance, last row == last column
        tm_expected = np.vstack([class_tm_base, tm_lastrow])

        # Test covariance conversion
        classcov, tm = fc.covct2cl(cartcov, cartstate, use_mean_anom=use_mean_anom)

        # Compare results
        assert custom_allclose(classcov, cov_expected)
        assert custom_allclose(tm, tm_expected)

    @pytest.mark.parametrize(
        "use_mean_anom, class_state, class_cov, tm_exp, cartcov_exp",
        # fmt: off
        [
            (
                True,
                class_state_mean(),
                class_cov_mean(),
                np.array(
                    [
                        [0.26313983942512426, -122181.09461831323, -27000.833116307094,
                         -40629744.21000002, -40629740.66496733, -40219144.61841942],
                        [0.9653589155905844, -510035.2045932821, -17382.637901740887,
                         11074952.739999903, 11074974.61023185, 12318280.508156924],
                        [-0.000762985712046392, 388.5845977374862, -31305277.396918915,
                         0.0, 28893.677010573563, 27849.176713029363],
                        [3.493683276822948e-05, 865.2314914318102, 1.71219733686734,
                         -900.7122362999926, -900.7106317278178, -808.3919389536693],
                        [-1.0700419170738e-05, 2955.794755743881, 1.1022810368438238,
                         -2940.822436000001, -2940.8226451355285, -2965.6792649314566],
                        [-2.4191514732274634e-08, -2.387504193316633,
                         1985.1540268409651, 0, 2.409791539953639, 2.3439685169019615]
                    ]
                ),
                np.array(
                    [
                        [24098442.580799103, 86695218.21947145, -5509927.873355819,
                         -6294.930929586146, 1752.417985989945, 17.658533888831073],
                        [86695551.13614655, 453000033.8695812, -27999999.954731148,
                         -32967.40471932187, 6319.425707785413, 90.7335547196626],
                        [-5509927.0577840805, -27999999.943911552, 1771703.0000502856,
                         2061.5921072992423, -401.5839722053788, -5.677635830610768],
                        [-6294.951171875, -32967.40576171875, 2061.5921034812927,
                         6949865.000000715, -1352585.999998629, 0.38500535738421604],
                        [1752.479736328125, 6319.385314941406, -401.58407604694366,
                         -1352585.9999958351, 263241.3000110984, 2.013476115767844],
                        [17.658579101844225, 90.73356022074586, -5.677635813602592,
                         0.3850053571416687, 2.01347612272229, 33.37338000069615]
                    ]
                ),
            ),
            (
                False,
                class_state_true(),
                class_cov_true(),
                np.array(
                    [
                        [0.26313983942513086, -137728.61043798938, -27000.833116307254,
                         -40629744.20999994, -40629740.66496724, -40285313.20469349],
                        [0.9653589155905823, -505273.3265653776, -17382.637901740993,
                         11074952.740000183, 11074974.61023213, 12338546.558424711],
                        [-0.0007629857120463965, 399.3502547305805, -31305277.3969191,
                         0.0, 28893.67701057334, 27894.994212866175],
                        [3.4936832768229415e-05, 864.918991338172, 1.7121973368673264,
                         -900.712236300013, -900.7106317278384, -809.7219063675537],
                        [-1.0700419170738243e-05, 2954.648313030472, 1.1022810368438152,
                         -2940.8224359999954, -2940.822645135523, -2970.558404111681],
                        [-2.4191514732274445e-08, -2.386598085343853,
                         1985.1540268409494, 0, 2.409791539953653, 2.347824816793632]
                    ]
                ),
                np.array(
                    [
                        [24096124.615553856, 86695907.30600595, -5509926.253087776,
                         -6294.978854407527, 1752.2477284182096, 17.658669530529835],
                        [86696324.15161896, 452999803.3278446, -28000000.491524436,
                         -32967.38936690602, 6319.482606475707, 90.73350950974327],
                        [-5509925.572429657, -28000000.403985977, 1771702.9990295544,
                         2061.592136245985, -401.58386245468864, -5.67763592028615],
                        [-6294.9677734375, -32967.4013671875, 2061.5921149253845,
                         6949865.000000477, -1352585.9999996424, 0.3850053581991233],
                        [1752.24560546875, 6319.4521484375, -401.58391058444977,
                         -1352586.000000529, 263241.29999387264, 2.013476129475748],
                        [17.658705342852045, 90.73352183160023, -5.677635904114169,
                         0.3850053595509486, 2.0134761320387486, 33.37338000068877]
                    ]
                ),
            ),
        ],
        # fmt: on
    )
    def test_covcl2ct(self, use_mean_anom, class_state, class_cov, tm_exp, cartcov_exp):
        # Test covariance conversion
        cartcov, tm = fc.covcl2ct(class_cov, class_state, use_mean_anom=use_mean_anom)

        # Compare results
        # NOTE: The covariance seems very sensitive to machine precision, so we use a
        #       higher absolute tolerance for this test
        assert custom_allclose(cartcov, cartcov_exp, atol=1e-3)
        assert custom_allclose(tm, tm_exp)


class TestEquinoctialCartesian:
    # fmt: off
    eq_cov_true_n = [
        [3.620382720282475e-08, -8.020295923888982e-05, -0.0003212558295547466,
         5.9379580707639784e-08, 1.618945695186506e-08, 0.0],
        [-8.020295923888982e-05, 0.17767502556217937, 0.7116835703536055,
         -0.000131446597240794, -3.583704509952729e-05, 0.0],
        [-0.0003212558295547466, 0.7116835703536054, 2.8506742490366133,
         -0.000526942941471943, -0.0001436592539704766, 0.0],
        [5.937958070763978e-08, -0.00013144659724079397, -0.0005269429414719431,
         9.192800461932832e-07, 2.504978222924519e-07, 0.0],
        [1.6189456951865057e-08, -3.58370450995273e-05, -0.00014365925397047657,
         2.504978222924519e-07, 6.852121825668235e-08, 0.0],
        [0, 0, 0, 0, 0, 0]
    ]

    eq_cov_mean_a = [
        [5331023186024117.0, 30776443.85466882, 123276149.59726484,
         -22785.846670808547, -6212.4130785819325, 11385265.073260155],
        [30776443.854668826, 0.17767502556217937, 0.7116835703536055,
         -0.000131446597240794, -3.583704509952729e-05,
         0.06572803376592073],
        [123276149.59726484, 0.7116835703536054, 2.8506742490366133,
         -0.000526942941471943, -0.0001436592539704766,
         0.26327631579518807],
        [-22785.84667080855, -0.00013144659724079397, -0.0005269429414719431,
         9.192800461932832e-07, 2.504978222924519e-07, -4.8872111603682685e-05],
        [-6212.4130785819325, -3.58370450995273e-05, -0.00014365925397047657,
         2.504978222924519e-07, 6.852121825668235e-08, -1.3322454764827869e-05],
        [11385265.073260156, 0.06572803376592073, 0.2632763157951882,
         -4.887211160368268e-05, -1.3322454764827875e-05, 0.024315241765525693]
    ]

    # fmt: on

    @pytest.fixture(name="eq_cov_true_n")
    def eq_cov_true_n_fix(self):
        return self.eq_cov_true_n

    @pytest.fixture(name="eq_cov_mean_a")
    def eq_cov_mean_a_fix(self):
        return self.eq_cov_mean_a

    @pytest.mark.parametrize(
        # fmt: off
        "fr, use_mean_anom, tm_exp, cov_exp",
        [
            (
                1,
                False,
                np.array(
                    [
                        [-1.3690921373305804e-12, -5.022672750444952e-12,
                         3.969743773961633e-15, 6.811512091339006e-08,
                         -2.086223300417736e-08, -4.7165350161198116e-11],
                        [-2.0068455953788673e-08, 1.2670447722294537e-08,
                         1.0197686823076022e-11, -9.18105180187478e-05,
                         0.0003498129983032651, -1.1624907558308972e-07],
                        [1.267043519667704e-08, 2.0054673518069036e-08,
                         -2.229628302516436e-11, -0.0006245480252550316,
                         8.170982852901403e-05, 4.896377646967924e-07],
                        [-3.000397236679245e-12, -1.9316003510677005e-12,
                         -3.478717393360175e-09, 1.3534342113673268e-07,
                         8.713159597219173e-08, 0.00015691972630474597],
                        [9.796296006771089e-12, 6.306674521132766e-12,
                         1.1358011163540663e-08, 3.68922711006994e-08,
                         2.375056307166365e-08, 4.2773597972181366e-05],
                        [0, 0, 0, 0, 0, 0]
                    ]
                ),
                eq_cov_true_n
            ),
            (
                -1,
                False,
                np.array(
                    [
                        [-1.3690921373305804e-12, -5.022672750444952e-12,
                         3.969743773961633e-15, 6.811512091339006e-08,
                         -2.086223300417736e-08, -4.7165350161198116e-11],
                        [-4.022750315581222e-09, -2.4013723311637738e-08,
                         -9.237815663664927e-07, 0.0005939615477391202,
                         -0.00022728161483621782, -0.014568406425328312],
                        [-2.3602079898300232e-08, 3.1745451584017257e-09,
                         -1.0289811896648058e-07, 0.00017357175613918577,
                         0.0002837042684058097, -0.0016232726121407765],
                        [3.86212460269652e-05, 2.4863645210833514e-05,
                         0.04477820425402866, -0.08532715571983353,
                         -0.05493204763995006, -98.9299207117852],
                        [5.033787069961052e-06, 3.240659187614189e-06,
                         0.005836268084997266, 0.5264054942093714,
                         0.33889013927507794, 610.324501796048],
                        [0, 0, 0, 0, 0, 0]
                    ]
                ),
                np.array(
                    [
                        [3.620382720282475e-08, 0.000320124584333352,
                         5.9368992368515214e-05, -0.03742331082188849,
                         0.23095697339285887, 0],
                        [0.000320124584333352, 2.8377210133468544, 0.5257376925883985,
                         -282.8952997336925, 1745.3821081654376, 0],
                        [5.9368992368515214e-05, 0.5257376925883985,
                         0.09744237174847635, -56.09176792478839, 346.0759741025573, 0],
                        [-0.03742331082188848, -282.8952997336926, -56.09176792478837,
                         368880.277636458, -2253735.9673102433, 0],
                        [0.23095697339285887, 1745.3821081654376, 346.0759741025573,
                         -2253735.9673102433, 13906034.2698353, 0],
                        [0, 0, 0, 0, 0, 0]
                    ]
                )
            ),
            (
                1,
                True,
                np.array(
                    [
                        [0.5253644964759829, 1.9273603788610505, -0.001523317811913226,
                         -26137.9531919868, 8005.50688938608, 18.098855265405813],
                        [-2.0068455953788673e-08, 1.2670447722294537e-08,
                         1.0197686823076022e-11, -9.18105180187478e-05,
                         0.0003498129983032651, -1.1624907558308972e-07],
                        [1.267043519667704e-08, 2.0054673518069036e-08,
                         -2.229628302516436e-11, -0.0006245480252550316,
                         8.170982852901403e-05, 4.896377646967924e-07],
                        [-3.000397236679245e-12, -1.9316003510677005e-12,
                         -3.478717393360175e-09, 1.3534342113673268e-07,
                         8.713159597219173e-08, 0.00015691972630474597],
                        [9.796296006771089e-12, 6.306674521132766e-12,
                         1.1358011163540663e-08, 3.68922711006994e-08,
                         2.375056307166365e-08, 4.2773597972181366e-05],
                        [2.2795365114085697e-08, -6.596483795216146e-09,
                         -2.386294678782899e-11, -0.00018068561497021647,
                         -0.0006244783204972765, 3.785668116986375e-07]
                    ]
                ),
                eq_cov_mean_a
            )
        ],
        # fmt: on
    )
    def test_covct2eq(self, cartcov, cartstate, fr, use_mean_anom, tm_exp, cov_exp):
        # Test covariance conversion
        eqcov, tm = fc.covct2eq(cartcov, cartstate, fr, use_mean_anom=use_mean_anom)

        # Compare results
        assert custom_allclose(eqcov, cov_exp)
        assert custom_allclose(tm, tm_exp)

    @pytest.mark.parametrize(
        "eq_cov, eq_state, fr, anom_type, tm_exp, cartcov_exp",
        # fmt: off
        [
            (
                eq_cov_true_n,
                eq_state_true_n(),
                1,
                fc.AnomalyType.TRUE_N,
                np.array(
                    [
                        [201259067933.05347, -82001479.57543981, 12900048.25607875,
                         -41664.472708166824, 35043.176647159205, -36506241.74848718],
                        [-312620129184.17084, 10873068.18217736, -45624716.40816064,
                         -6149.499636585576, 54672.47009893215, -23502044.50114236],
                        [0.0, 64688.95427881771, 14207.376887251487,
                         -22149899.653338224, 81259467.04421845, 44536.467541592494],
                        [-12168747.249495728, -1773.9121518615482, -2860.056384916835,
                         4.722260877394363, 0.8022578798669566, 1774.4690509477857],
                        [-7834014.83371412, -2748.269685428566, 1826.485558897817,
                         1.6863015942984447, -1.5864127728403592, -2756.321738134731],
                        [14845.48918053083, 3.05601134149206, 1.4526230664790183,
                         6073.894350161091, 1860.3064558446156, -0.0]
                    ]
                ),
                np.array(
                    [
                        [2609030091871121.5, 662293657883465.0, -2617957009659.2876,
                         166580272337.64417, -174484257224.26282, 58058172.501122974],
                        [662293657883462.5, 168121674339084.84, -664590474214.5638,
                         42285897838.340576, -44292285700.95308, 14769380.660515677],
                        [-2617957009659.285, -664590474214.5682, 2628679768.067772,
                         -167152461.74384883, 175082415.52000895, -58280.49691913719],
                        [166580272337.64392, 42285897838.34079, -167152461.74384862,
                         10635751.779044999, -11140401.388419641, 3709.973733741031],
                        [-174484257224.26266, -44292285700.95302, 175082415.5200088,
                         -11140401.388419632, 11668997.165476888, -3888.691447165852],
                        [58058172.501123086, 14769380.660515513, -58280.49691913728,
                         3709.973733741027, -3888.6914471658415, 36.89196056210292]
                    ]
                )
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a(),
                1,
                fc.AnomalyType.MEAN_A,
                np.array(
                    [
                        [-0.5244781657723259, -82001479.57543989, 12900048.25607889,
                         -41664.472708167086, 35043.17664715923, -36506241.74848718],
                        [0.8146834506486021, 10873068.182177497, -45624716.40816079,
                         -6149.499636585656, 54672.47009893231, -23502044.501142364],
                        [0.0, 64688.95427881771, 14207.37688725145, -22149899.65333851,
                         81259467.04421851, 44536.4675415925],
                        [3.1711576043299176e-05, -1773.9121518615686,
                         -2860.056384916829, 4.722260877394359, 0.8022578798669658,
                         1774.4690509477887],
                        [2.0415327233783575e-05, -2748.2696854285596,
                         1826.4855588978378, 1.6863015942984452, -1.5864127728403485,
                         -2756.321738134735],
                        [-3.868712607765664e-08, 3.0560113414920744, 1.4526230664790016,
                         6073.894350161093, 1860.3064558446367, 0.0]
                    ]
                ),
                np.array(
                    [
                        [3222967917453305.0, 944155803358342.8, -3303984133910.558,
                         169436541121.3681, -169529552978.84833, 64584912.11589565],
                        [944155803358339.5, 276587567030200.3, -967922410447.6935,
                         49635789230.039734, -49663017469.432526, 18971175.135294974],
                        [-3303984133910.556, -967922410447.6968, 3388804849.7748504,
                         -173697223.63692337, 173791313.74274427, -66242.91411366676],
                        [169436541121.36777, 49635789230.03995, -173697223.6369232,
                         8907549.928411111, -8912438.351624563, 3392.7266851459913],
                        [-169529552978.8482, -49663017469.43248, 173791313.74274412,
                         -8912438.351624552, 8917330.511702783, -3395.904640918359],
                        [64584912.1158958, 18971175.13529483, -66242.91411366682,
                         3392.7266851459885, -3395.904640918352, 36.89196056210307]
                    ]
                )
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a(),
                -1,
                fc.AnomalyType.MEAN_A,
                np.array(
                    [
                        [-0.5244781657723259, -82001474.3681856, 12900026.405768631,
                         41664.46976308289, -35043.181221823186, 36506241.74848718],
                        [0.8146834506486021, -10873028.910520243, 45624710.23015201,
                         18448.512392800727, -35568.1435402667, 23502044.501142364],
                        [0.0, -76763.73598880075, 36459.96369906112, -22149892.82416389,
                         81259477.6521254, 44536.467541595375],
                        [-3.1711576043299176e-05, -1773.9134680463778,
                         -2860.0555101877994, -4.722260069800937, -0.8022566254143717,
                         1774.4690509477887],
                        [-2.0415327233783575e-05, 2748.27053498028, -1826.4841891769372,
                         -5.058905270085495, -3.6523265676512406, -2756.321738134735],
                        [-3.868712607765914e-08, -0.003991338147869339,
                         -3.4809784128729158, 6073.892477482377, 1860.3035469716697, 0]
                    ]
                ),
                np.array(
                    [
                        [2059907354894879.2, -6154242670970935.0, -1640467867635.4426,
                         345630229904.54065, 174545640304.3555, 488133352.9342482],
                        [-6154242670970934.0, 1.838661697053411e+16, 4901178261563.883,
                         -1032616034444.2095, -521478413672.9735, -1458728859.1500251],
                        [-1640467867635.441, 4901178261563.881, 1308235741.4081857,
                         -275256269.3095366, -139007038.12667027, -388954.6550469429],
                        [345630229904.5404, -1032616034444.2095, -275256269.3095368,
                         57993045.77979807, 29286895.7873687, 81918.34012989723],
                        [174545640304.35547, -521478413672.9733, -139007038.12667024,
                         29286895.787368685, 14790092.580395268, 41376.778227155984],
                        [488133352.9342481, -1458728859.150025, -388954.6550469431,
                         81918.34012989722, 41376.778227156006, 151.3182421571985]
                    ]
                )
            )
        ]
        # fmt: on
    )
    def test_coveq2ct(self, eq_cov, eq_state, fr, anom_type, tm_exp, cartcov_exp):
        # Test covariance conversion
        cartcov, tm = fc.coveq2ct(eq_cov, eq_state, fr, anom_type)

        # Compare results
        assert custom_allclose(cartcov, cartcov_exp)
        assert custom_allclose(tm, tm_exp)


class TestEquinoctialClassical:
    # fmt: off
    eq_cov_true_n = np.array(
        [
            [3.620382720282463e-08, -8.02029592388877e-05, -0.00032125582955474765,
             5.93795806989224e-08, 1.6189456958473605e-08, -5.533400300461455e-11],
            [-8.020295923888773e-05, 0.1776750255621706, 0.7116835703535914,
             -0.00013144659722147834, -3.5837045114165295e-05, 1.2020141326729572e-07],
            [-0.00032125582955474776, 0.7116835703535914, 2.8506742490366412,
             -0.0005269429413945923, -0.0001436592540291189, 4.716869597132245e-07],
            [5.93795806989224e-08, -0.00013144659722147834, -0.0005269429413945923,
             9.192800461772371e-07, 2.504978223108563e-07, -5.420240888065475e-10],
            [1.61894569584736e-08, -3.5837045114165295e-05, -0.00014365925402911887,
             2.5049782231085613e-07, 6.852121826791335e-08, -7.402974119136152e-10],
            [-5.5334006740967297e-11, 1.2020141322824615e-07, 4.716869607530471e-07,
             -5.420240901153391e-10, -7.402974111611232e-10, 5.505945921413513e-09]
        ]
    )

    eq_cov_mean_a = np.array(
        [
            [5331023186024109.0, 30776443.854668032, 123276149.59726535,
             -22785.846667463426, -6212.413081117849, -6710091.910501003],
            [30776443.854668044, 0.1776750255621706, 0.7116835703535914,
             -0.00013144659722147834, -3.5837045114165295e-05, -0.03873792729160286],
            [123276149.59726536, 0.7116835703535914, 2.8506742490366412,
             -0.0005269429413945923, -0.0001436592540291189, -0.15516617427427093],
            [-22785.84666746343, -0.00013144659722147834, -0.0005269429413945923,
             9.192800461772371e-07, 2.504978223108563e-07, 2.8680062879614387e-05],
            [-6212.4130811178475, -3.5837045114165295e-05, -0.00014365925402911887,
             2.5049782231085613e-07, 6.852121826791335e-08, 7.818403737861433e-06],
            [-6710091.91050005, -0.03873792729160366, -0.15516617427426568,
             2.868006287961387e-05, 7.818403737862714e-06, 0.008445916682340737]
        ]
    )

    eq_tm_base = np.array(
        # All but the first row
        [
            [0, 0.9505279674685699, 0, 0.009657784996993584, 0.009657784996993584, 0],
            [0, -0.3106389915320826, 0, 0.029551971882746268, 0.029551971882746268, 0],
            [0, 0, 0.4204124819169607, -0.00027763103819112634, 0, 0],
            [0, 0, -0.2706537946831403, -0.0004312503874544222, 0, 0],
            [0, 0, 0, 1, 1, 1]
        ]
    )

    class_tm_base = np.array(
        # All but the first row
        [
            [0, 0.9505279674685702, -0.31063899153208246, 0, 0, 0],
            [0, 0, 0, 1.6816490429323554, -1.0826146091561857, 0],
            [0, 0, 0, -1055.4070397050114, -1639.3869279182743, 0],
            [0, 9.991585346961854, 30.573371568055485, 1055.4070397050114,
             1639.3869279182743, 0],
            [0, -9.991585346961854, -30.573371568055485, 0, 0, 1]
        ]
    )

    # fmt: on

    @pytest.mark.parametrize(
        "class_cov, class_state, fr, anom_type, tm_exp, eqcov_exp",
        # fmt: off
        [
            (
                class_cov_true(),
                class_state_true(),
                1,
                fc.AnomalyType.TRUE_N,
                np.vstack([[-2.605985266446659e-12, 0, 0, 0, 0, 0], eq_tm_base]),
                eq_cov_true_n
            ),
            (
                class_cov_mean(),
                class_state_mean(),
                1,
                fc.AnomalyType.MEAN_A,
                np.vstack([[1, 0, 0, 0, 0, 0], eq_tm_base]),
                eq_cov_mean_a
            ),
            (
                class_cov_mean(),
                class_state_mean(),
                -1,
                fc.AnomalyType.MEAN_A,
                np.array(
                    [
                        [1, 0, 0, 0, 0, 0],
                        [0, -0.1107210569457745, 0, 0.030898903804508025,
                         -0.030898903804508025, 0],
                        [0, 0.9938515218828265, 0, 0.003442324343599778,
                         -0.003442324343599778, 0],
                        [0, 0, -1598186.9170174072, -1055.4070397050164, 0, 0],
                        [0, 0, 1028883.2332745728, -1639.3869279182795, 0, 0],
                        [0, 0, 0, -1, 1, 1]
                    ]
                ),
                np.array(
                    [
                        [5331023186024109.0, -122842054.57953845, -22781783.586050514,
                         14360522775.290115, -88625586743.626, -75175875.45948744],
                        [-122842054.57953848, 2.8377210133613957, 0.5257376925906649,
                         -282.89529931273466, 1745.3821073724225, 1.5029322942912415],
                        [-22781783.586050514, 0.525737692590665, 0.09744237174880306,
                         -56.09176784446154, 346.075973942842, 0.2960203328304942],
                        [14360522775.290123, -282.8952993127345, -56.09176784446151,
                         368880.27724641, -2253735.96524965, -1757.1026349871827],
                        [-88625586743.626, 1745.3821073724225, 346.075973942842,
                         -2253735.9652496492, 13906034.259152379, 10854.100743283634],
                        [-75175875.45948648, 1.5029322942912464, 0.29602033283049556,
                         -1757.1026349871845, 10854.100743283645, 8.480636819478143]
                    ]
                )
            )
        ]
        # fmt: on
    )
    def test_covcl2eq(self, class_cov, class_state, fr, anom_type, tm_exp, eqcov_exp):
        # Test covariance conversion
        eqcov, tm = fc.covcl2eq(class_cov, class_state, fr, anom_type)

        # Compare results
        assert custom_allclose(eqcov, eqcov_exp)
        assert custom_allclose(tm, tm_exp)

    @pytest.mark.parametrize(
        "eq_cov, eq_state, fr, anom_type, tm_exp, classcov_exp",
        # fmt: off
        [
            (
                eq_cov_true_n,
                eq_state_true_n(),
                1,
                fc.AnomalyType.TRUE_N,
                np.vstack([[-383732023690.03735, 0, 0, 0, 0, 0], class_tm_base]),
                class_cov_true()
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a(),
                1,
                fc.AnomalyType.MEAN_A,
                np.vstack([[1, 0, 0, 0, 0, 0], class_tm_base]),
                class_cov_mean()
            ),
            (
                eq_cov_mean_a,
                eq_state_mean_a(),
                -1,
                fc.AnomalyType.MEAN_A,
                np.array(
                    [
                        [1, 0, 0, 0, 0, 0],
                        [0, 0.9505279674685702, -0.31063899153208246, 0, 0, 0],
                        [0, 0, 0, -1.6816490429323554, 1.0826146091561857, 0],
                        [0, 0, 0, -1055.4070397050114, -1639.3869279182743, 0],
                        [0, 9.991585346961854, 30.573371568055485, -1055.4070397050114,
                         -1639.3869279182743, 0],
                        [0, -9.991585346961854, -30.573371568055485, 0, 0, 1]
                    ]
                ),
                np.array(
                    [
                        [5331023186024110.0, -9040508.167764392, 31592.148081011983,
                         34232891.77449304, 4110705884.3407645, -4083183084.4767847],
                        [-9040508.167764392, 0.015331208062918732,
                         -5.3721460601286505e-05,
                         -0.058207412772983705, -6.971213627626803, 6.9243853954578585],
                        [31592.148081011983, -5.3721460601286505e-05,
                         1.767881070192675e-06,
                         0.0019143196050926594, 0.026072352389218727,
                         -0.024197798266311972],
                        [34232891.77449304, -0.05820741277298369, 0.0019143196050926598,
                         2.07496119655159, 28.25158670453334, -26.219712037129188],
                        [4110705884.3407645, -6.971213627626803, 0.026072352389218727,
                         28.251586704533345, 3171.5847002791575, -3148.507206511361],
                        [-4083183084.4767847, 6.924385395457858, -0.02419779826631198,
                         -26.21971203712919, -3148.507206511361, 3127.4269467985036]
                    ]
                )
            )
        ]
        # fmt: on
    )
    def test_coveq2cl(self, eq_cov, eq_state, fr, anom_type, tm_exp, classcov_exp):
        # Test covariance conversion
        classcov, tm = fc.coveq2cl(eq_cov, eq_state, fr, anom_type)

        # Compare results
        assert custom_allclose(classcov, classcov_exp)
        assert custom_allclose(tm, tm_exp)


class TestFlightCartesian:
    # fmt: off
    flcov_latlon = np.array(
        [
            [1.0883567059765465e-07, -2.4648720677173544e-08, -5.0788923011001195e-09,
             -6.505021243065809e-10, 7.039625138133815, 0.0005108287705099376],
            [-2.464872067717354e-08, 5.879500790159742e-09, 1.2481764470383299e-09,
             1.5358534332993033e-10, -1.6519622216648082, -0.00012043162458763846],
            [-5.078892301100135e-09, 1.248176447038331e-09, 0.008374102968607102,
             -5.941656352563438e-05, -0.33768416998404877, -244.41693377498171],
            [-6.505021243065809e-10, 1.5358534332993033e-10, -5.94165635256344e-05,
             3.950226823514596e-06, -0.043176717726581305, 1.7279198348281204],
            [7.039625138133814, -1.6519622216648082, -0.3376841699840489,
             -0.04317671772658131, 467373780.37122524, 33917.46568190547],
            [0.0005108287705099377, -0.00012043162458763847, -244.4169337749818,
             1.7279198348281208, 33917.46568190547, 7133885.581683842]
        ]
    )

    flcov_radec = np.array(
        [
            [5.507136039838392e-09, -1.1399655720883035e-09, -5.766104151460021e-10,
             -7.506387828610423e-11, 0.8103026599250637, 5.875693365269568e-05],
            [-1.1399655720883031e-09, 9.747003637887425e-10, 5.366459884434408e-10,
             6.265580156852079e-11, -0.6674651097650145, -4.898688798414044e-05],
            [-5.766104151460069e-10, 5.3664598844344e-10, 0.008374102968607102,
             -5.941656352563438e-05, -0.33768416998404877, -244.41693377498171],
            [-7.50638782861043e-11, 6.265580156852079e-11, -5.94165635256344e-05,
             3.950226823514596e-06, -0.043176717726581305, 1.7279198348281204],
            [0.8103026599250636, -0.6674651097650146, -0.3376841699840489,
             -0.04317671772658131, 467373780.37122524, 33917.46568190547],
            [5.875693365269569e-05, -4.898688798414044e-05, -244.4169337749818,
             1.7279198348281208, 33917.46568190547, 7133885.581683842]
        ]
    )

    flt_state_base = [
        0.0310896570389561,  # fpa, rad
        1.57011021365369,    # az, rad
        42112.1327406289,    # rmag, km
        3.07566631469422     # vmag, km/s
    ]

    flt_state_latlon = [
        0.697852034288512,   # lon, rad
        0.113526309755656,   # latgc, rad
        *flt_state_base
    ]

    flt_state_radec = [
        1.30467913594635,   # ra, rad
        -0.000762543260628765,   # dec, rad
        *flt_state_base
    ]

    @pytest.fixture
    def orbit_effects(self):
        ttt = 0.308148718799587
        jdut1 = 2462799.5
        xp, yp = 0.0987, 0.286
        ddpsi = ddeps = lod = 0.0
        return ttt, jdut1, lod, xp, yp, ddpsi, ddeps
    # fmt: on

    @pytest.mark.parametrize(
        "use_latlon, tm_exp, flcov_exp",
        # fmt: off
        [
            (
                True,
                np.array(
                    [
                        [-1.5357486631635204e-08, 1.831273835930753e-08, 0, 0, 0, 0],
                        [-2.061160710457601e-09, -1.728537121834426e-09,
                         2.3593267354538505e-08, 0, 0, 0],
                        [-2.2910236755065528e-08, 6.244939943599752e-09,
                         1.6292522920169198e-11, 9.52153255576222e-05,
                         0.00031087829509313504, -2.547422867190293e-07],
                        [1.8107010570151465e-11, -4.351970580555423e-12,
                         7.384964681326488e-10, -2.8056279837979433e-07,
                         -1.806211501670178e-07, -0.00032528982320147794],
                        [0.2629872205288504, 0.9647990155293474, -0.0007625431867291463,
                         0, 0, 0],
                        [0, 0, 0, -0.9561578321907049, 0.2928510911592657,
                         0.0006620779404031189]
                    ]
                ),
                flcov_latlon
            ),
            (
                False,
                np.array(
                    [
                        [-2.291025207570586e-08, 6.2449312426997765e-09, 0, 0, 0, 0],
                        [4.762028386218741e-12, 1.747005154740069e-11,
                         2.374611885422565e-08, 0, 0, 0],
                        [-2.2910236755065528e-08, 6.244939943599752e-09,
                         1.6292522920169198e-11, 9.52153255576222e-05,
                         0.00031087829509313504, -2.547422867190293e-07],
                        [1.8107010570151465e-11, -4.351970580555423e-12,
                         7.384964681326488e-10, -2.8056279837979433e-07,
                         -1.806211501670178e-07, -0.00032528982320147794],
                        [0.2629872205288504, 0.9647990155293474, -0.0007625431867291463,
                         0, 0, 0],
                        [0, 0, 0, -0.9561578321907049, 0.2928510911592657,
                         0.0006620779404031189]
                    ]
                ),
                flcov_radec
            )
        ]
        # fmt: on
    )
    def test_covct2fl(self, cartcov, cartstate, orbit_effects, use_latlon, tm_exp, flcov_exp):
        # Test covariance conversion
        flcov, tm = fc.covct2fl(
            cartcov, cartstate, *orbit_effects, use_latlon=use_latlon
        )

        # Expected values
        assert custom_allclose(flcov, flcov_exp)
        assert custom_allclose(tm, tm_exp)

    @pytest.mark.parametrize(
        "use_latlon, flt_cov, flt_state, tm_exp, cartcov_exp",
        # fmt: off
        [
            (
                True,
                flcov_latlon,
                flt_state_latlon,
                np.array(
                    [
                        [-26885942.79258054, -3655327.792114417, 0,
                         0, 0.26298722052885054, 0],
                        [32059623.27778461, -3065442.5679112067, 0,
                         0, 0.9647990155293475, 0],
                        [0, 41841048.79851104, 0, 0, -0.0007625431867287644, 0],
                        [-2416.3953797676754, -9.904332870788263, 900.7106317278258,
                         -2.651481948467394, 0, -0.9561578321907049],
                        [-1902.7846863181308, -8.306002994963741, 2940.8226451355276,
                         -1.7069751297820244, 0, 0.29285109115926594],
                        [0, 94.75163353777806, -2.4097915399086673,
                         -3074.17839862028, 0, 0.0006620779404065998]
                    ]
                ),
                np.array(
                    [
                        [9857178.200881273, -90395565.5805006, 8697367.761353228,
                         6598.570794583315, 718.029810143528, -0.5409382321210519],
                        [-90395565.58050054, 997070417.138252, -101024661.4418244,
                         -72746.10349253757, -6647.303713866126, -0.040457803641487544],
                        [8697367.761353228, -101024661.4418244, 10398770.908869572,
                         7392.668748596456, 641.6403179283589, 0.09247423484085626],
                        [6598.57079458332, -72746.10349253759, 7392.668748596455,
                         6949867.908042358, -1352585.055781341, 0.3916092428216871],
                        [718.0298101435287, -6647.303713866127, 641.6403179283595,
                         -1352585.055781341, 263241.2248985778, 2.0121510703946797],
                        [-0.5409382321210754, -0.04045780364147272, 0.092474234840851,
                         0.39160924281989673, 2.012151070395126, 33.37336200198301]
                    ]
                )
            ),
            (
                False,
                flcov_radec,
                flt_state_radec,
                np.array(
                    [
                        [-40629744.21, 8445.132210538966, 0, 0, 0.26298722052884715, 0],
                        [11074952.739999857, 30981.943633452876, 0,
                         0, 0.9647990155293484, 0],
                        [0, 42112120.497111745, 0, 0, -0.0007625431867291461, 0],
                        [-900.7122362999903, -0.5355291378664989, 900.7106317278156,
                         -2.6514819484676964, 0, -0.9561578321907059],
                        [-2940.822436000003, -1.9646505406683983, 2940.822645135531,
                         -1.7069751297831657, 0, 0.2928510911592626],
                        [0, 95.60758814153121, -2.409791539909841,
                         -3074.17839862028, 0, 0.000662077940406588]
                    ]
                ),
                np.array(
                    [
                        [24097165.99999942, 86695627.99999858, -5509926.999999905,
                         -6294.969999999899, 1752.32599999996, 17.658610000022392],
                        [86695627.99999857, 453000000.0000005, -27999999.999999996,
                         -32967.400000000045, 6319.430999999904, 90.73355000011598],
                        [-5509926.999999904, -27999999.999999993, 1771702.9999999977,
                         2061.582, -401.5819999999935, -5.6776400000072496],
                        [-6294.969999999899, -32967.400000000045, 2061.582,
                         6949865.00000001, -1352585.999999978, 0.38500597549500526],
                        [1752.3259999999602, 6319.430999999902, -401.58199999999346,
                         -1352585.999999978, 263241.29999999114, 2.0134760047692453],
                        [17.65861000002238, 90.73355000011595, -5.6776400000072496,
                         0.3850059754938398, 2.013476004769603, 33.37337999999999]
                    ]
                )
            )
        ]
        # fmt: on
    )
    def test_covfl2ct(self, orbit_effects, use_latlon, flt_cov, flt_state, tm_exp, cartcov_exp):
        # Test covariance conversion
        cartcov, tm = fc.covfl2ct(
            flt_cov, flt_state, *orbit_effects, use_latlon=use_latlon
        )

        # Compare results
        assert custom_allclose(cartcov, cartcov_exp)
        assert custom_allclose(tm, tm_exp)


class TestSatCoord:
    def test_covct2rsw(self, cartcov, cartstate):
        # Test covariance conversion
        covrsw, tm = fc.covct2rsw(cartcov, cartstate)

        # Expected values
        tm_exp = np.array(
            [
                [0.26298722052885, 0.9647990155293474, -0.0007625431867291462, 0, 0, 0],
                [-0.964798931348555, 0.2629877398621285, 0.000686112887893904, 0, 0, 0],
                [0.0008625005480072, 0.000555261930307162, 0.9999994738883583, 0, 0, 0],
                [0, 0, 0, 0.26298722052885, 0.9647990155293474, -0.0007625431867291462],
                [0, 0, 0, -0.964798931348555, 0.2629877398621285, 0.000686112887893904],
                [0, 0, 0, 0.0008625005480072, 0.000555261930307162, 0.9999994738883583],
            ]
        )
        # fmt: off
        covoprsw_exp = np.array(
            [
                [467373780.3712252, 34104269.69513586, -28131785.309472024,
                 -2473.396507080248, 34010.78586784423, 66.9666829895545],
                [34104269.69513586, 9763746.137283769, -2027163.5665480944,
                 -710.4814009823186, 2496.2544419237756, 4.566424991855891],
                [-28131785.30947203, -2027163.5665480946, 1731342.491490899,
                 153.32961072346302, -2070.40625710878, -4.074574843530568],
                [-2473.396507080246, -710.4814009823189, 153.32961072346302,
                 39320.49060041467, -531106.423120838, 396.40114518077286],
                [34010.78586784423, 2496.2544419237756, -2070.4062571087798,
                 -531106.4231208381, 7173781.8508625, -5326.837605675035],
                [66.96668298955449, 4.566424991855886, -4.074574843530568,
                 396.40114518077297, -5326.837605675035, 37.331917082529586]
            ]
        )

        # Compare results
        assert custom_allclose(covrsw, covoprsw_exp)
        assert custom_allclose(tm, tm_exp)

    def test_covct2ntw(self, cartcov, cartstate):
        # Test covariance conversion
        covntw, tm = fc.covct2ntw(cartcov, cartstate)

        # Expected values
        tm_exp = np.array(
            [
                [0.292850569460222, 0.9561579001875247, -0.000783502270189895, 0, 0, 0],
                [-0.956157832190705, 0.2928510911592657, 0.000662077940403119, 0, 0, 0],
                [0.0008625005480072, 0.000555261930307162, 0.9999994738883584, 0, 0, 0],
                [0, 0, 0, 0.292850569460222, 0.9561579001875247, -0.000783502270189895],
                [0, 0, 0, -0.956157832190705, 0.2928510911592657, 0.000662077940403119],
                [0, 0, 0, 0.0008625005480072, 0.000555261930307162, 0.9999994738883584],
            ]
        )
        # fmt: off
        covntw_exp = np.array(
            [
                [464812398.29949164, 48256136.09535531, -28055177.112280603,
                 -3503.222607949419, 33824.20406548627, 66.79237599325076],
                [48256136.09535535, 12325128.209017547, -2900650.6205217475,
                 -897.0632033402854, 3526.080542792949, 6.645854121627563],
                [-28055177.1122806, -2900650.6205217475, 1731342.4914908994,
                 217.61336664036213, -2064.639547635191, -4.074574843530569],
                [-3503.2226079494203, -897.0632033402858, 217.6133666403622,
                 79216.75977907518, -751745.110565811, 561.7924632926649],
                [33824.20406548627, 3526.080542792949, -2064.639547635191,
                 -751745.110565811, 7133885.581683842, -5311.941450479471],
                [66.79237599325077, 6.6458541216275595, -4.074574843530569,
                 561.7924632926649, -5311.941450479471, 37.3319170825296]
            ]
        )

        # Compare results
        assert custom_allclose(covntw, covntw_exp)
        assert custom_allclose(tm, tm_exp)
